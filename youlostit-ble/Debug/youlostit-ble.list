
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ac  080044ac  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  080044ac  080044ac  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044ac  080044ac  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080044b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000188  0800463c  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800463c  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a20c  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e5e  00000000  00000000  0002a407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002c268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006fe  00000000  00000000  0002cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002715c  00000000  00000000  0002d2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab94  00000000  00000000  00054432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0bf0  00000000  00000000  0005efc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c30  00000000  00000000  0014fbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  001527e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043ec 	.word	0x080043ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	080043ec 	.word	0x080043ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ble_init>:
uint8_t READ_CHAR_HANDLE[2];

uint16_t stackInitCompleteFlag=0;
uint8_t* rxEvent;

void ble_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000276:	2006      	movs	r0, #6
 8000278:	f003 f962 	bl	8003540 <malloc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b70      	ldr	r3, [pc, #448]	; (8000444 <ble_init+0x1d4>)
 8000282:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000284:	bf00      	nop
 8000286:	4b70      	ldr	r3, [pc, #448]	; (8000448 <ble_init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800028e:	4b6d      	ldr	r3, [pc, #436]	; (8000444 <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2106      	movs	r1, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f905 	bl	80004a4 <fetchBleEvent>
 800029a:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002a2:	4b68      	ldr	r3, [pc, #416]	; (8000444 <ble_init+0x1d4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2206      	movs	r2, #6
 80002a8:	4968      	ldr	r1, [pc, #416]	; (800044c <ble_init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f984 	bl	80005b8 <checkEventResp>
 80002b0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80002b8:	4b65      	ldr	r3, [pc, #404]	; (8000450 <ble_init+0x1e0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b63      	ldr	r3, [pc, #396]	; (8000450 <ble_init+0x1e0>)
 80002c4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f001 fa3c 	bl	8001744 <HAL_Delay>
	free(rxEvent);
 80002cc:	4b5d      	ldr	r3, [pc, #372]	; (8000444 <ble_init+0x1d4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 f93d 	bl	8003550 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2307      	movs	r3, #7
 80002dc:	4a5d      	ldr	r2, [pc, #372]	; (8000454 <ble_init+0x1e4>)
 80002de:	2104      	movs	r1, #4
 80002e0:	485d      	ldr	r0, [pc, #372]	; (8000458 <ble_init+0x1e8>)
 80002e2:	f000 fa5b 	bl	800079c <BLE_command>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80002ec:	4b58      	ldr	r3, [pc, #352]	; (8000450 <ble_init+0x1e0>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	; (8000450 <ble_init+0x1e0>)
 80002f8:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80002fa:	4b52      	ldr	r3, [pc, #328]	; (8000444 <ble_init+0x1d4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 f926 	bl	8003550 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2307      	movs	r3, #7
 800030a:	4a54      	ldr	r2, [pc, #336]	; (800045c <ble_init+0x1ec>)
 800030c:	2107      	movs	r1, #7
 800030e:	4854      	ldr	r0, [pc, #336]	; (8000460 <ble_init+0x1f0>)
 8000310:	f000 fa44 	bl	800079c <BLE_command>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d11b      	bne.n	8000352 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800031a:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <ble_init+0x1e0>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b4a      	ldr	r3, [pc, #296]	; (8000450 <ble_init+0x1e0>)
 8000326:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000328:	4b46      	ldr	r3, [pc, #280]	; (8000444 <ble_init+0x1d4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3307      	adds	r3, #7
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b4c      	ldr	r3, [pc, #304]	; (8000464 <ble_init+0x1f4>)
 8000334:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000336:	4b43      	ldr	r3, [pc, #268]	; (8000444 <ble_init+0x1d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3309      	adds	r3, #9
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b49      	ldr	r3, [pc, #292]	; (8000468 <ble_init+0x1f8>)
 8000342:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000344:	4b3f      	ldr	r3, [pc, #252]	; (8000444 <ble_init+0x1d4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	330b      	adds	r3, #11
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b47      	ldr	r3, [pc, #284]	; (800046c <ble_init+0x1fc>)
 8000350:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000352:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <ble_init+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f003 f8fa 	bl	8003550 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800035c:	4b44      	ldr	r3, [pc, #272]	; (8000470 <ble_init+0x200>)
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2308      	movs	r3, #8
 8000362:	2200      	movs	r2, #0
 8000364:	4940      	ldr	r1, [pc, #256]	; (8000468 <ble_init+0x1f8>)
 8000366:	483f      	ldr	r0, [pc, #252]	; (8000464 <ble_init+0x1f4>)
 8000368:	f000 fade 	bl	8000928 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800036c:	4b38      	ldr	r3, [pc, #224]	; (8000450 <ble_init+0x1e0>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	; (8000450 <ble_init+0x1e0>)
 8000378:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800037a:	4b32      	ldr	r3, [pc, #200]	; (8000444 <ble_init+0x1d4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f003 f8e6 	bl	8003550 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2307      	movs	r3, #7
 800038a:	4a3a      	ldr	r2, [pc, #232]	; (8000474 <ble_init+0x204>)
 800038c:	2110      	movs	r1, #16
 800038e:	483a      	ldr	r0, [pc, #232]	; (8000478 <ble_init+0x208>)
 8000390:	f000 fa04 	bl	800079c <BLE_command>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 800039a:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <ble_init+0x1e0>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <ble_init+0x1e0>)
 80003a6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <ble_init+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 f8cf 	bl	8003550 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003b2:	2300      	movs	r3, #0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2307      	movs	r3, #7
 80003b8:	4a30      	ldr	r2, [pc, #192]	; (800047c <ble_init+0x20c>)
 80003ba:	2106      	movs	r1, #6
 80003bc:	4830      	ldr	r0, [pc, #192]	; (8000480 <ble_init+0x210>)
 80003be:	f000 f9ed 	bl	800079c <BLE_command>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <ble_init+0x1e0>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <ble_init+0x1e0>)
 80003d4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003d6:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <ble_init+0x1d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 f8b8 	bl	8003550 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2307      	movs	r3, #7
 80003e6:	4a27      	ldr	r2, [pc, #156]	; (8000484 <ble_init+0x214>)
 80003e8:	2124      	movs	r1, #36	; 0x24
 80003ea:	4827      	ldr	r0, [pc, #156]	; (8000488 <ble_init+0x218>)
 80003ec:	f000 f9d6 	bl	800079c <BLE_command>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 80003f6:	4b16      	ldr	r3, [pc, #88]	; (8000450 <ble_init+0x1e0>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	; (8000450 <ble_init+0x1e0>)
 8000402:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <ble_init+0x1d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 f8a1 	bl	8003550 <free>

	//This will start the advertisment,
	setConnectable();
 800040e:	f000 f945 	bl	800069c <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000412:	2207      	movs	r2, #7
 8000414:	491d      	ldr	r1, [pc, #116]	; (800048c <ble_init+0x21c>)
 8000416:	481e      	ldr	r0, [pc, #120]	; (8000490 <ble_init+0x220>)
 8000418:	f000 fa0c 	bl	8000834 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800041c:	2310      	movs	r3, #16
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2314      	movs	r3, #20
 8000422:	4a1a      	ldr	r2, [pc, #104]	; (800048c <ble_init+0x21c>)
 8000424:	491b      	ldr	r1, [pc, #108]	; (8000494 <ble_init+0x224>)
 8000426:	481c      	ldr	r0, [pc, #112]	; (8000498 <ble_init+0x228>)
 8000428:	f000 fa3c 	bl	80008a4 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800042c:	2304      	movs	r3, #4
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a16      	ldr	r2, [pc, #88]	; (800048c <ble_init+0x21c>)
 8000434:	4919      	ldr	r1, [pc, #100]	; (800049c <ble_init+0x22c>)
 8000436:	481a      	ldr	r0, [pc, #104]	; (80004a0 <ble_init+0x230>)
 8000438:	f000 fa34 	bl	80008a4 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800043c:	bf00      	nop
}
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200001bc 	.word	0x200001bc
 8000448:	200001c4 	.word	0x200001c4
 800044c:	20000000 	.word	0x20000000
 8000450:	200001ba 	.word	0x200001ba
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000008 	.word	0x20000008
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000014 	.word	0x20000014
 8000464:	200001a4 	.word	0x200001a4
 8000468:	200001a8 	.word	0x200001a8
 800046c:	200001ac 	.word	0x200001ac
 8000470:	200000e8 	.word	0x200000e8
 8000474:	20000034 	.word	0x20000034
 8000478:	20000024 	.word	0x20000024
 800047c:	20000044 	.word	0x20000044
 8000480:	2000003c 	.word	0x2000003c
 8000484:	20000070 	.word	0x20000070
 8000488:	2000004c 	.word	0x2000004c
 800048c:	200001b0 	.word	0x200001b0
 8000490:	200000f0 	.word	0x200000f0
 8000494:	200001b8 	.word	0x200001b8
 8000498:	20000110 	.word	0x20000110
 800049c:	200001b4 	.word	0x200001b4
 80004a0:	20000100 	.word	0x20000100

080004a4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	; 0x30
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ae:	4a3d      	ldr	r2, [pc, #244]	; (80005a4 <fetchBleEvent+0x100>)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b8:	6018      	str	r0, [r3, #0]
 80004ba:	3304      	adds	r3, #4
 80004bc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	4839      	ldr	r0, [pc, #228]	; (80005a8 <fetchBleEvent+0x104>)
 80004c2:	f001 fc1f 	bl	8001d04 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d065      	beq.n	8000598 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 f939 	bl	8001744 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	4834      	ldr	r0, [pc, #208]	; (80005ac <fetchBleEvent+0x108>)
 80004da:	f001 fc2b 	bl	8001d34 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004de:	f107 0210 	add.w	r2, r7, #16
 80004e2:	f107 0118 	add.w	r1, r7, #24
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2305      	movs	r3, #5
 80004ec:	4830      	ldr	r0, [pc, #192]	; (80005b0 <fetchBleEvent+0x10c>)
 80004ee:	f002 fca1 	bl	8002e34 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	482c      	ldr	r0, [pc, #176]	; (80005ac <fetchBleEvent+0x108>)
 80004fa:	f001 fc1b 	bl	8001d34 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f001 f920 	bl	8001744 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	4828      	ldr	r0, [pc, #160]	; (80005ac <fetchBleEvent+0x108>)
 800050c:	f001 fc12 	bl	8001d34 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000510:	f107 0210 	add.w	r2, r7, #16
 8000514:	f107 0118 	add.w	r1, r7, #24
 8000518:	2301      	movs	r3, #1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2305      	movs	r3, #5
 800051e:	4824      	ldr	r0, [pc, #144]	; (80005b0 <fetchBleEvent+0x10c>)
 8000520:	f002 fc88 	bl	8002e34 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000524:	7cfb      	ldrb	r3, [r7, #19]
 8000526:	461a      	mov	r2, r3
 8000528:	7d3b      	ldrb	r3, [r7, #20]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  char dummy=0xff;
 8000530:	23ff      	movs	r3, #255	; 0xff
 8000532:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dd01      	ble.n	8000540 <fetchBleEvent+0x9c>
	  dataSize=size;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(dataSize>0){
 8000540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dd1f      	ble.n	8000586 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	e00d      	b.n	8000568 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	441a      	add	r2, r3
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4814      	ldr	r0, [pc, #80]	; (80005b0 <fetchBleEvent+0x10c>)
 800055e:	f002 fc69 	bl	8002e34 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	3301      	adds	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3a      	ldr	r2, [r7, #32]
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	429a      	cmp	r2, r3
 800056e:	dbed      	blt.n	800054c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <fetchBleEvent+0x108>)
 8000578:	f001 fbdc 	bl	8001d34 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <fetchBleEvent+0x110>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e00a      	b.n	800059c <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <fetchBleEvent+0x108>)
 800058e:	f001 fbd1 	bl	8001d34 <HAL_GPIO_WritePin>
        return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e001      	b.n	800059c <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000598:	f06f 0301 	mvn.w	r3, #1
  }
}
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08004404 	.word	0x08004404
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	200001c8 	.word	0x200001c8
 80005b4:	200001c4 	.word	0x200001c4

080005b8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int j=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00f      	b.n	80005ee <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	68b9      	ldr	r1, [r7, #8]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d002      	beq.n	80005e8 <checkEventResp+0x30>
			return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e007      	b.n	80005f8 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbeb      	blt.n	80005ce <checkEventResp+0x16>
		}
	}

return BLE_OK;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800060e:	4a1f      	ldr	r2, [pc, #124]	; (800068c <sendCommand+0x88>)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	481a      	ldr	r0, [pc, #104]	; (8000690 <sendCommand+0x8c>)
 8000626:	f001 fb85 	bl	8001d34 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2305      	movs	r3, #5
 8000638:	4816      	ldr	r0, [pc, #88]	; (8000694 <sendCommand+0x90>)
 800063a:	f002 fbfb 	bl	8002e34 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800063e:	7abb      	ldrb	r3, [r7, #10]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	7a7a      	ldrb	r2, [r7, #9]
 8000644:	4313      	orrs	r3, r2
 8000646:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	db09      	blt.n	8000664 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480e      	ldr	r0, [pc, #56]	; (8000694 <sendCommand+0x90>)
 800065a:	f002 fa76 	bl	8002b4a <HAL_SPI_Transmit>
		result=0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	e002      	b.n	800066a <sendCommand+0x66>
	  }else{
		result=-1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <sendCommand+0x8c>)
 8000672:	f001 fb5f 	bl	8001d34 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <sendCommand+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1cd      	bne.n	800061e <sendCommand+0x1a>

}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	0800440c 	.word	0x0800440c
 8000690:	48000c00 	.word	0x48000c00
 8000694:	200001c8 	.word	0x200001c8
 8000698:	200001c4 	.word	0x200001c4

0800069c <setConnectable>:
	  }else{
		  //something bad is happening if I am here
	  }
}

void setConnectable(){
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80006a2:	200d      	movs	r0, #13
 80006a4:	f002 ff4c 	bl	8003540 <malloc>
 80006a8:	4603      	mov	r3, r0
 80006aa:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4936      	ldr	r1, [pc, #216]	; (8000788 <setConnectable+0xec>)
 80006b0:	461a      	mov	r2, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	cb03      	ldmia	r3!, {r0, r1}
 80006b6:	6010      	str	r0, [r2, #0]
 80006b8:	6051      	str	r1, [r2, #4]
	   localname[sizeof(deviceName)+1]=0x00;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3309      	adds	r3, #9
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	330a      	adds	r3, #10
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	330b      	adds	r3, #11
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	330c      	adds	r3, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3308      	adds	r3, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <setConnectable+0xf0>)
 80006e4:	2209      	movs	r2, #9
 80006e6:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <setConnectable+0xf0>)
 80006ea:	2216      	movs	r2, #22
 80006ec:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80006ee:	201a      	movs	r0, #26
 80006f0:	f002 ff26 	bl	8003540 <malloc>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <setConnectable+0xf0>)
 80006fc:	461c      	mov	r4, r3
 80006fe:	4613      	mov	r3, r2
 8000700:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000702:	6020      	str	r0, [r4, #0]
 8000704:	6061      	str	r1, [r4, #4]
 8000706:	60a2      	str	r2, [r4, #8]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	330d      	adds	r3, #13
 8000710:	220d      	movs	r2, #13
 8000712:	68f9      	ldr	r1, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f972 	bl	80039fe <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 800071a:	211a      	movs	r1, #26
 800071c:	68b8      	ldr	r0, [r7, #8]
 800071e:	f7ff ff71 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000722:	2007      	movs	r0, #7
 8000724:	f002 ff0c 	bl	8003540 <malloc>
 8000728:	4603      	mov	r3, r0
 800072a:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 800072c:	bf00      	nop
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <setConnectable+0xf4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0fb      	beq.n	800072e <setConnectable+0x92>
	   res=fetchBleEvent(rxEvent,7);
 8000736:	2107      	movs	r1, #7
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff feb3 	bl	80004a4 <fetchBleEvent>
 800073e:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10f      	bne.n	8000766 <setConnectable+0xca>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000746:	2207      	movs	r2, #7
 8000748:	4912      	ldr	r1, [pc, #72]	; (8000794 <setConnectable+0xf8>)
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff34 	bl	80005b8 <checkEventResp>
 8000750:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d106      	bne.n	8000766 <setConnectable+0xca>
		   stackInitCompleteFlag|=0x80;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <setConnectable+0xfc>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <setConnectable+0xfc>)
 8000764:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f002 fef2 	bl	8003550 <free>
	   free(discoverableCommand);
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f002 feef 	bl	8003550 <free>
	   free(localname);
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f002 feec 	bl	8003550 <free>
	   HAL_Delay(10);
 8000778:	200a      	movs	r0, #10
 800077a:	f000 ffe3 	bl	8001744 <HAL_Delay>
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	bf00      	nop
 8000788:	200000e8 	.word	0x200000e8
 800078c:	20000078 	.word	0x20000078
 8000790:	200001c4 	.word	0x200001c4
 8000794:	20000088 	.word	0x20000088
 8000798:	200001ba 	.word	0x200001ba

0800079c <BLE_command>:

int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff ff29 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	005a      	lsls	r2, r3, #1
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	4413      	add	r3, r2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fec0 	bl	8003540 <malloc>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <BLE_command+0x90>)
 80007c6:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007cc:	e007      	b.n	80007de <BLE_command+0x42>
		   contatore++;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3301      	adds	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	f247 5230 	movw	r2, #30000	; 0x7530
 80007da:	4293      	cmp	r3, r2
 80007dc:	dc07      	bgt.n	80007ee <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007de:	2140      	movs	r1, #64	; 0x40
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <BLE_command+0x94>)
 80007e2:	f001 fa8f 	bl	8001d04 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0f0      	beq.n	80007ce <BLE_command+0x32>
 80007ec:	e000      	b.n	80007f0 <BLE_command+0x54>
			   break;
 80007ee:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <BLE_command+0x90>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	005a      	lsls	r2, r3, #1
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4619      	mov	r1, r3
 80007fe:	f7ff fe51 	bl	80004a4 <fetchBleEvent>
 8000802:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d107      	bne.n	800081a <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <BLE_command+0x90>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fed0 	bl	80005b8 <checkEventResp>
 8000818:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 800081a:	200a      	movs	r0, #10
 800081c:	f000 ff92 	bl	8001744 <HAL_Delay>


	return response;
 8000820:	697b      	ldr	r3, [r7, #20]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001bc 	.word	0x200001bc
 8000830:	48001000 	.word	0x48001000

08000834 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af02      	add	r7, sp, #8
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <addService+0x60>)
 8000842:	2210      	movs	r2, #16
 8000844:	68f9      	ldr	r1, [r7, #12]
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f8d9 	bl	80039fe <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <addService+0x64>)
 8000852:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000854:	2301      	movs	r3, #1
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2307      	movs	r3, #7
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <addService+0x68>)
 800085c:	2117      	movs	r1, #23
 800085e:	480e      	ldr	r0, [pc, #56]	; (8000898 <addService+0x64>)
 8000860:	f7ff ff9c 	bl	800079c <BLE_command>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10a      	bne.n	8000880 <addService+0x4c>
		   handle[0]=rxEvent[7];
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <addService+0x6c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	79da      	ldrb	r2, [r3, #7]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <addService+0x6c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	7a12      	ldrb	r2, [r2, #8]
 800087e:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <addService+0x6c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fe63 	bl	8003550 <free>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000095 	.word	0x20000095
 8000898:	20000090 	.word	0x20000090
 800089c:	200000a8 	.word	0x200000a8
 80008a0:	200001bc 	.word	0x200001bc

080008a4 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <addCharacteristic+0x74>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	68f9      	ldr	r1, [r7, #12]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 f8a0 	bl	80039fe <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <addCharacteristic+0x78>)
 80008c4:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	785a      	ldrb	r2, [r3, #1]
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <addCharacteristic+0x78>)
 80008cc:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <addCharacteristic+0x78>)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <addCharacteristic+0x78>)
 80008d6:	7e3b      	ldrb	r3, [r7, #24]
 80008d8:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80008da:	2301      	movs	r3, #1
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2307      	movs	r3, #7
 80008e0:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <addCharacteristic+0x7c>)
 80008e2:	211e      	movs	r1, #30
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <addCharacteristic+0x78>)
 80008e6:	f7ff ff59 	bl	800079c <BLE_command>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10a      	bne.n	8000906 <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <addCharacteristic+0x80>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	79da      	ldrb	r2, [r3, #7]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <addCharacteristic+0x80>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	7a12      	ldrb	r2, [r2, #8]
 8000904:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <addCharacteristic+0x80>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fe20 	bl	8003550 <free>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000b7 	.word	0x200000b7
 800091c:	200000b0 	.word	0x200000b0
 8000920:	200000d0 	.word	0x200000d0
 8000924:	200001bc 	.word	0x200001bc

08000928 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af02      	add	r7, sp, #8
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	3306      	adds	r3, #6
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <updateCharValue+0x9c>)
 8000940:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <updateCharValue+0x9c>)
 8000948:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	785a      	ldrb	r2, [r3, #1]
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <updateCharValue+0x9c>)
 8000950:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <updateCharValue+0x9c>)
 8000958:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	785a      	ldrb	r2, [r3, #1]
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <updateCharValue+0x9c>)
 8000960:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <updateCharValue+0x9c>)
 8000968:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <updateCharValue+0x9c>)
 8000970:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	330a      	adds	r3, #10
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fde2 	bl	8003540 <malloc>
 800097c:	4603      	mov	r3, r0
 800097e:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000980:	220a      	movs	r2, #10
 8000982:	4910      	ldr	r1, [pc, #64]	; (80009c4 <updateCharValue+0x9c>)
 8000984:	6978      	ldr	r0, [r7, #20]
 8000986:	f003 f83a 	bl	80039fe <memcpy>
	memcpy(commandComplete+10,data,size);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	330a      	adds	r3, #10
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	6a39      	ldr	r1, [r7, #32]
 8000992:	4618      	mov	r0, r3
 8000994:	f003 f833 	bl	80039fe <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f103 010a 	add.w	r1, r3, #10
 800099e:	2300      	movs	r3, #0
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2307      	movs	r3, #7
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <updateCharValue+0xa0>)
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff fef8 	bl	800079c <BLE_command>

	free(commandComplete);
 80009ac:	6978      	ldr	r0, [r7, #20]
 80009ae:	f002 fdcf 	bl	8003550 <free>
	free(rxEvent);
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <updateCharValue+0xa4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fdca 	bl	8003550 <free>
}
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000d8 	.word	0x200000d8
 80009c8:	200000d0 	.word	0x200000d0
 80009cc:	200001bc 	.word	0x200001bc

080009d0 <i2c_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>


void i2c_init(){ // SCL -> PB10
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
 * rather than operating as GPIO pins using the I/O Alternate function GPIO peripheral config (STM32 Datasheet - Table 17).
 *
 * */

	/* Enable the I2C and GPIOB clock */
	RCC->APB1ENR1 |= (1<<22); // enable I2C clock - 6.4.19
 80009d4:	4b41      	ldr	r3, [pc, #260]	; (8000adc <i2c_init+0x10c>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	4a40      	ldr	r2, [pc, #256]	; (8000adc <i2c_init+0x10c>)
 80009da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009de:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->AHB2ENR |= (1<<1); // enable GPIOB clock - 6.4.17
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <i2c_init+0x10c>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e4:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <i2c_init+0x10c>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	64d3      	str	r3, [r2, #76]	; 0x4c

	/* GPIO pins using the I/O Alternate function *///- 8.5.1
	// SCL -> PB10
	/* Configure PB10 as an output by clearing all bits and setting the mode */
	GPIOB->MODER &= ~GPIO_MODER_MODE10; // clearing
 80009ec:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <i2c_init+0x110>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a3b      	ldr	r2, [pc, #236]	; (8000ae0 <i2c_init+0x110>)
 80009f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80009f6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2<<20); // 10: Alternate function mode
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <i2c_init+0x110>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <i2c_init+0x110>)
 80009fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a02:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1<<10); // Output open-drain - 8.5.2
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <i2c_init+0x110>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a35      	ldr	r2, [pc, #212]	; (8000ae0 <i2c_init+0x110>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR |= (1<<20); // 01: Pull-up  - 8.5.4
 8000a10:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <i2c_init+0x110>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <i2c_init+0x110>)
 8000a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a1a:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] |= (4<<8); // 0100: AF4 alternate function high - 8.5.10
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <i2c_init+0x110>)
 8000a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a20:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <i2c_init+0x110>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6253      	str	r3, [r2, #36]	; 0x24

	// SDA -> PB11
	/* Configure PB11 as an output by clearing all bits and setting the mode */
	GPIOB->MODER &= ~GPIO_MODER_MODE11; // clearing
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <i2c_init+0x110>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <i2c_init+0x110>)
 8000a2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a32:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2<<22); // 10: Alternate function mode
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <i2c_init+0x110>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a29      	ldr	r2, [pc, #164]	; (8000ae0 <i2c_init+0x110>)
 8000a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a3e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1<<11); // Output open-drain - 8.5.2
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <i2c_init+0x110>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <i2c_init+0x110>)
 8000a46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a4a:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR |= (1<<22); // 01: Pull-up  - 8.5.4
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <i2c_init+0x110>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <i2c_init+0x110>)
 8000a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a56:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] |= (4<<12); // 0100: AF4 alternate function high - 8.5.10
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <i2c_init+0x110>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <i2c_init+0x110>)
 8000a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a62:	6253      	str	r3, [r2, #36]	; 0x24

	//I2C_CR1 PE = 1 (Peripheral enable)

	// clock resource HSI16 - 6.2.2
	// turn on HSI16 w/ 8MHz
	RCC->CR |= (1<<8); // HSION = 1 : HSI16 oscillator ON -> HSI16 clock enable
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <i2c_init+0x10c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <i2c_init+0x10c>)
 8000a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6e:	6013      	str	r3, [r2, #0]
	RCC->CR |= (0111<<4);// MSIRANGE[3:0] = 0111: range 7 around 8 MHz -> change to 8MHz
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <i2c_init+0x10c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <i2c_init+0x10c>)
 8000a76:	f443 6392 	orr.w	r3, r3, #1168	; 0x490
 8000a7a:	6013      	str	r3, [r2, #0]
	// choose HSI16 as resource clock in MUX - 6.4.28
	// The HSI16 clock can be selected as system clock after wakeup from Stop modes ?? - 6.2.2 -> 6.3
	RCC->CCIPR |= (10<<14);// I2C2SEL[1:0] = 10: HSI16 clock selected as I2C2 clock
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <i2c_init+0x10c>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <i2c_init+0x10c>)
 8000a84:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	// 39.4.9
	// Before enabling the peripheral, the I2C master clock must be configured
	// by setting the SCLH and SCLL bits in the I2C_TIMINGR register
	// I2C_TIMINGR // fI2CCLK = 8 MHz - 39.4.10(example) -> 39.7.5(registers)
	I2C2->TIMINGR |= (0<<28); // PRESC[3:0] = 0
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <i2c_init+0x114>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <i2c_init+0x114>)
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x9<<20); // SCLDEL[3:0] = 0x9
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <i2c_init+0x114>)
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <i2c_init+0x114>)
 8000a9a:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 8000a9e:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x3<<16); // SDADEL[3:0] = 0x3
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <i2c_init+0x114>)
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <i2c_init+0x114>)
 8000aa6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000aaa:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x1<<8); // SCLH[7:0] = 0x1
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <i2c_init+0x114>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <i2c_init+0x114>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x3<<0); // SCLL[7:0] = 0x3
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <i2c_init+0x114>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <i2c_init+0x114>)
 8000abe:	f043 0303 	orr.w	r3, r3, #3
 8000ac2:	6113      	str	r3, [r2, #16]

	/* PE */
	// 1: Peripheral enable(PE) - 39.7.1
	// NACKIE = 1: Not acknowledge (NACKF) received interrupts enabled
	I2C2->CR1 |= (1<<0) | (1<<4);
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <i2c_init+0x114>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <i2c_init+0x114>)
 8000aca:	f043 0311 	orr.w	r3, r3, #17
 8000ace:	6013      	str	r3, [r2, #0]

}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	40005800 	.word	0x40005800

08000ae8 <i2c_transaction>:
//     -> 1 : Reading from 2nd
// This is a blocking function: it should return only when the entire transaction has been completed.
//																	TC==0 -> return
// A serial data transfer always begins with a START condition and ends with a STOP condition.
// Both START and STOP conditions are generated in master mode by software
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len){
 8000ae8:	b480      	push	{r7}
 8000aea:	b08d      	sub	sp, #52	; 0x34
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	603a      	str	r2, [r7, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	460b      	mov	r3, r1
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	4613      	mov	r3, r2
 8000afc:	717b      	strb	r3, [r7, #5]
	// WHAT DO : RD_WRN = 0: Master requests a write transfer // RD_WRN = 1: Master requests a read transfer
	// START = 1: Restart/Start generation:

	// Transmission : writing : dir == 0

	if (dir == 0) {  // Figure 406
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d14c      	bne.n	8000b9e <i2c_transaction+0xb6>
					//  AUTOEND    NBYTES        SADD        START
		I2C2->CR2 |= ( (1<<25) | (0x2<<16) | (address<<1) | (1<<13)); // AUTOEND = 1: Automatic end mode
 8000b04:	4b60      	ldr	r3, [pc, #384]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	4a5e      	ldr	r2, [pc, #376]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b14:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
 8000b18:	6053      	str	r3, [r2, #4]

		// I2C_ISR.NACKF = 1 -> END
		uint32_t NACKF = (I2C2->ISR)&(1<<4);
 8000b1a:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	613b      	str	r3, [r7, #16]
		if (NACKF == 1){ // NACKF: Not Acknowledge received flag - 39.7.7
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <i2c_transaction+0x46>
			// END - probably wrong address
			return 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e0a5      	b.n	8000c7a <i2c_transaction+0x192>
		}
		// I2C_ISR.NACKF = 0 -> connected well
		// I2C_ISR.TXIS = 1 (by hardware) -> auto re-start?
		//
		uint8_t TXIS = (I2C2->ISR)&(1<<1);
 8000b2e:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i = len; i>0; i--){
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b40:	e020      	b.n	8000b84 <i2c_transaction+0x9c>
			while( TXIS == 0){
				TXIS = (I2C2->ISR)&(1<<1);
 8000b42:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while( TXIS == 0){
 8000b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f4      	beq.n	8000b42 <i2c_transaction+0x5a>
			}
			// I2C_ISR.TXIS = 1 -> Write I2C_TXDR
			I2C2->TXDR = *data; // -> TXE == 0
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
			data++;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	603b      	str	r3, [r7, #0]
			while( TXIS == 0){ // waiting until Write done
 8000b66:	e006      	b.n	8000b76 <i2c_transaction+0x8e>
				TXIS = (I2C2->ISR)&(1<<1);
 8000b68:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while( TXIS == 0){ // waiting until Write done
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f4      	beq.n	8000b68 <i2c_transaction+0x80>
		for(int i = len; i>0; i--){
 8000b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b80:	3b01      	subs	r3, #1
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	dce2      	bgt.n	8000b50 <i2c_transaction+0x68>
		}
		//STOP
			//I2C2->CR2 |= (1<<14);
			//I2C2->CR2 |= I2C_CR2_START;
		// I2C_ISR.TC : Transfer Complete (master mode)
		uint32_t TC = (I2C2->ISR)&(1<<6);
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <i2c_transaction+0x1a0>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b92:	60fb      	str	r3, [r7, #12]
		if( TC == 0 ){
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d16f      	bne.n	8000c7a <i2c_transaction+0x192>
			// I2C_ISR.TC = 1 (by hardware) -> END
			return 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e06d      	b.n	8000c7a <i2c_transaction+0x192>
		}

	}
	// Reception : Reading : dir == 1
	else if (dir == 1){            // Figure 409
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d16a      	bne.n	8000c7a <i2c_transaction+0x192>
	//Device (Slave) Address (7 bits
		dir = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71bb      	strb	r3, [r7, #6]
		//NBYTES clear
		I2C2->CR2 &= (0x0<<17);
 8000ba8:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <i2c_transaction+0x1a0>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <i2c_transaction+0x1a0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
		            //  AUTOEND    NBYTES        SADD        START
		I2C2->CR2 |= ( (1<<25) | (0x1<<16) | (address<<1) | (1<<13)); // AUTOEND = 1: Automatic end mode
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <i2c_transaction+0x1a0>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	79fa      	ldrb	r2, [r7, #7]
 8000bb8:	0052      	lsls	r2, r2, #1
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <i2c_transaction+0x1a0>)
 8000bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
 8000bc6:	6053      	str	r3, [r2, #4]

		// I2C_ISR.NACKF = 1 -> END
		uint32_t NACKF = (I2C2->ISR)&(1<<4);
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <i2c_transaction+0x1a0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	61fb      	str	r3, [r7, #28]
		if (NACKF == 1){ // NACKF: Not Acknowledge received flag - 39.7.7
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d101      	bne.n	8000bdc <i2c_transaction+0xf4>
			// END - probably wrong address
			return 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e04e      	b.n	8000c7a <i2c_transaction+0x192>
		}
		// I2C_ISR.NACKF = 0 -> connected well
		// I2C_ISR.TXIS = 1 (by hardware) -> auto re-start?
	//Register Address N (8 bits)
		uint8_t TXIS = (I2C2->ISR)&(1<<1);
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <i2c_transaction+0x1a0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while( TXIS == 0){
 8000bea:	e006      	b.n	8000bfa <i2c_transaction+0x112>
			TXIS = (I2C2->ISR)&(1<<1);
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <i2c_transaction+0x1a0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while( TXIS == 0){
 8000bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f4      	beq.n	8000bec <i2c_transaction+0x104>
		}
		// I2C_ISR.TXIS = 1 -> Write I2C_TXDR

		I2C2->TXDR = *data; // 30 : STATUS_REG(addr) (1Eh) , else
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
		while( TXIS == 0 ){ // waiting until read done
 8000c0a:	e006      	b.n	8000c1a <i2c_transaction+0x132>
			TXIS = (I2C2->ISR)&(1<<1);
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while( TXIS == 0 ){ // waiting until read done
 8000c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f4      	beq.n	8000c0c <i2c_transaction+0x124>
		}
		data++;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	603b      	str	r3, [r7, #0]


	//Repeated START
		uint8_t address1 = 0b11010101; // 11010101
 8000c28:	23d5      	movs	r3, #213	; 0xd5
 8000c2a:	76fb      	strb	r3, [r7, #27]
		I2C2->CR2 |= ( (1<<25) | (0x1<<16) | (address1) | (0x1<<10) | (1<<13)); // AUTOEND = 1: Automatic end mode
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	7efb      	ldrb	r3, [r7, #27]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
 8000c3e:	6053      	str	r3, [r2, #4]

	//Data Byte From Register N (8 bits)
		uint32_t RXNE = (I2C2->ISR)&(1<<2);
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	623b      	str	r3, [r7, #32]
		while (RXNE == 0){ // I2C_ISR.RXNE == 1 : Read I2C_RXDR
 8000c4a:	e004      	b.n	8000c56 <i2c_transaction+0x16e>
			RXNE = (I2C2->ISR)&(1<<2);
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	623b      	str	r3, [r7, #32]
		while (RXNE == 0){ // I2C_ISR.RXNE == 1 : Read I2C_RXDR
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f7      	beq.n	8000c4c <i2c_transaction+0x164>
		}
		*data = I2C2->RXDR; // data input to data[2] from RXDR
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	701a      	strb	r2, [r3, #0]
		// put in the data from register
		// I2C_ISR.TC = 1 (by hardware) -> EN
		uint32_t TC = (I2C2->ISR)&(1<<6);
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <i2c_transaction+0x1a0>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	617b      	str	r3, [r7, #20]
		if( TC == 0 ){
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <i2c_transaction+0x192>
		// I2C_ISR.TC = 1 (by hardware) -> END
			return 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e7ff      	b.n	8000c7a <i2c_transaction+0x192>
		}
	}
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3734      	adds	r7, #52	; 0x34
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40005800 	.word	0x40005800

08000c8c <lsm6dsl_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

// Configure and enable the LSM6DSL. Refer to section 4.1 of the LSM6DSL application note.
void lsm6dsl_init(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	// 1. CTRL1_XL = 60h; // {hx10, hx60};
	uint8_t addr = 0b1101010; // LSM6DSL (D4h) read // LSM6DSL (D4h) write 1101010 + 1(R)/0(W) ??
 8000c92:	236a      	movs	r3, #106	; 0x6a
 8000c94:	71fb      	strb	r3, [r7, #7]
	uint8_t dir = 0; // writing
 8000c96:	2300      	movs	r3, #0
 8000c98:	71bb      	strb	r3, [r7, #6]
	uint8_t data1[2] = {0x10, 0x60}; // CTRL1_XL (10h) value(60h)
 8000c9a:	f246 0310 	movw	r3, #24592	; 0x6010
 8000c9e:	80bb      	strh	r3, [r7, #4]
	//uint8_t len = 2;
	i2c_transaction(addr, dir, data1, 2);
 8000ca0:	79f8      	ldrb	r0, [r7, #7]
 8000ca2:	79b9      	ldrb	r1, [r7, #6]
 8000ca4:	1d3a      	adds	r2, r7, #4
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f7ff ff1e 	bl	8000ae8 <i2c_transaction>

	// 2. INT1_CTRL = 01h; // {hx0D, hx01};
	uint8_t data2[2] = {0x0D, 0x01}; // INT1_CTRL (0Dh) value(01h)
 8000cac:	f240 130d 	movw	r3, #269	; 0x10d
 8000cb0:	803b      	strh	r3, [r7, #0]
	i2c_transaction(addr, dir, data2, 2);
 8000cb2:	79f8      	ldrb	r0, [r7, #7]
 8000cb4:	79b9      	ldrb	r1, [r7, #6]
 8000cb6:	463a      	mov	r2, r7
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f7ff ff15 	bl	8000ae8 <i2c_transaction>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <lsm6dsl_read_xyz>:

// Read the current X,Y, and Z acceleration data from the accelerometer. This data will reflect the orientation and
// movement of the hardware. Refer to the data sheet for the units that these values are reported in.
void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	/* 4.2(app note) */

	// read STATUS_REG register
	uint8_t addr = 0b1101010; // LSM6DSL (D4h)
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t dir = 1; // reading
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t data[2] = {0x1E, 0}; // STATUS_REG(addr) (1Eh), LSM6DSL(addr)+1(read) (D5h)
 8000ce0:	231e      	movs	r3, #30
 8000ce2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	//}
	// STATUS_REG->XLDA == 1

	// Read OUTX_L_XL (28h) 42

	uint8_t dataxl[2] = {0x28, 0}; // OUTX_L_XL(addr) (28h), LSM6DSL(addr)+1(read) (D5h)
 8000ce4:	2328      	movs	r3, #40	; 0x28
 8000ce6:	853b      	strh	r3, [r7, #40]	; 0x28
	i2c_transaction(addr, 1, dataxl, 1);
 8000ce8:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000cec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	f7ff fef8 	bl	8000ae8 <i2c_transaction>
	// Read OUTX_H_XL (29h) 43
	uint8_t dataxh[2] = {0x29, 0}; // OUTX_H_XL(addr) (29h), LSM6DSL(addr)+1(read) (D5h)
 8000cf8:	2329      	movs	r3, #41	; 0x29
 8000cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
	i2c_transaction(addr, 1, dataxh, 1);
 8000cfc:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000d00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d04:	2301      	movs	r3, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	f7ff feee 	bl	8000ae8 <i2c_transaction>

	// little-edian
	// put into x
	int16_t tmpx = ((int16_t) dataxl[1]) | (((int16_t) dataxh[1])<<8);
 8000d0c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	86bb      	strh	r3, [r7, #52]	; 0x34
    *x = tmpx;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000d22:	801a      	strh	r2, [r3, #0]

	// Read OUTY_L_XL (2Ah) 44
	uint8_t datayl[2] = {0x2A, 0}; // OUTY_L_XL(addr) (2Ah), LSM6DSL(addr)+1(read) (D5h)
 8000d24:	232a      	movs	r3, #42	; 0x2a
 8000d26:	843b      	strh	r3, [r7, #32]
	i2c_transaction(addr, 1, datayl, 1);
 8000d28:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000d2c:	f107 0220 	add.w	r2, r7, #32
 8000d30:	2301      	movs	r3, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	f7ff fed8 	bl	8000ae8 <i2c_transaction>
	// Read OUTY_H_XL (2Bh) 45
	uint8_t datayh[2] = {0x2B, 0}; // OUTY_H_XL(addr) (2Bh), LSM6DSL(addr)+1(read) (D5h)
 8000d38:	232b      	movs	r3, #43	; 0x2b
 8000d3a:	83bb      	strh	r3, [r7, #28]
	i2c_transaction(addr, 1, datayh, 1);
 8000d3c:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000d40:	f107 021c 	add.w	r2, r7, #28
 8000d44:	2301      	movs	r3, #1
 8000d46:	2101      	movs	r1, #1
 8000d48:	f7ff fece 	bl	8000ae8 <i2c_transaction>

	// put into y
	int16_t tmpy = ((int16_t) datayl[1]) | (((int16_t) datayh[1])<<8);
 8000d4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	7f7b      	ldrb	r3, [r7, #29]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	867b      	strh	r3, [r7, #50]	; 0x32
	*y = tmpy;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8000d60:	801a      	strh	r2, [r3, #0]

	// Read OUTZ_L_XL (2Ch) 46
	uint8_t datazl[2] = {0x2C, 0}; // OUTZ_L_XL(addr) (2Ch), LSM6DSL(addr)+1(read) (D5h)
 8000d62:	232c      	movs	r3, #44	; 0x2c
 8000d64:	833b      	strh	r3, [r7, #24]
	i2c_transaction(addr, 1, datazl, 1);
 8000d66:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000d6a:	f107 0218 	add.w	r2, r7, #24
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	f7ff feb9 	bl	8000ae8 <i2c_transaction>
	// Read OUTZ_H_XL (2Dh) 47
	uint8_t datazh[2] = {0x2D, 0}; // OUTZ_H_XL(addr) (2Dh), LSM6DSL(addr)+1(read) (D5h)
 8000d76:	232d      	movs	r3, #45	; 0x2d
 8000d78:	82bb      	strh	r3, [r7, #20]
	i2c_transaction(addr, 1, datazh, 1);
 8000d7a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000d7e:	f107 0214 	add.w	r2, r7, #20
 8000d82:	2301      	movs	r3, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f7ff feaf 	bl	8000ae8 <i2c_transaction>

	// put into z
	int16_t tmpz = ((int16_t) datazl[1]) | (((int16_t) datazh[1])<<8);
 8000d8a:	7e7b      	ldrb	r3, [r7, #25]
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	7d7b      	ldrb	r3, [r7, #21]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	863b      	strh	r3, [r7, #48]	; 0x30
	*z = tmpz;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000d9c:	801a      	strh	r2, [r3, #0]

	printf("x: %d\n",tmpx);
 8000d9e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000da2:	4619      	mov	r1, r3
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <lsm6dsl_read_xyz+0x104>)
 8000da6:	f002 fd49 	bl	800383c <iprintf>
	printf("y: %d\n",tmpy);
 8000daa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <lsm6dsl_read_xyz+0x108>)
 8000db2:	f002 fd43 	bl	800383c <iprintf>
	printf("z: %d\n",tmpz);
 8000db6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <lsm6dsl_read_xyz+0x10c>)
 8000dbe:	f002 fd3d 	bl	800383c <iprintf>
}
 8000dc2:	bf00      	nop
 8000dc4:	3738      	adds	r7, #56	; 0x38
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08004414 	.word	0x08004414
 8000dd0:	0800441c 	.word	0x0800441c
 8000dd4:	08004424 	.word	0x08004424

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f000 fc3c 	bl	800165a <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f8d1 	bl	8000f88 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 f953 	bl	8001090 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000dea:	f000 f913 	bl	8001014 <MX_SPI3_Init>
  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f000 ff9c 	bl	8001d34 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f000 fca1 	bl	8001744 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 ff92 	bl	8001d34 <HAL_GPIO_WritePin>

  ble_init();
 8000e10:	f7ff fa2e 	bl	8000270 <ble_init>
  HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f000 fc95 	bl	8001744 <HAL_Delay>

  uint8_t standby = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75fb      	strb	r3, [r7, #23]
	// set timer as TIM2
	timer_init(TIM2);
 8000e1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e22:	f000 fb89 	bl	8001538 <timer_init>
	// set led
	//leds_init1();
	//leds_init2();
	// set I2C
	i2c_init();
 8000e26:	f7ff fdd3 	bl	80009d0 <i2c_init>
	// set accelerometer
	lsm6dsl_init();
 8000e2a:	f7ff ff2f 	bl	8000c8c <lsm6dsl_init>
	volatile int16_t x;
	volatile int16_t y;
	volatile int16_t z;
	volatile int16_t L;
	volatile int16_t L_p = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	81bb      	strh	r3, [r7, #12]
	volatile int16_t L_c;

	while (1){
		if(flag == 1){
 8000e32:	4b46      	ldr	r3, [pc, #280]	; (8000f4c <main+0x174>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	f040 8081 	bne.w	8000f3e <main+0x166>
			flag = 0;
 8000e3c:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <main+0x174>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
			//Begin reading accelerometer values
			lsm6dsl_read_xyz(&x,&y,&z);
 8000e42:	f107 0210 	add.w	r2, r7, #16
 8000e46:	f107 0112 	add.w	r1, r7, #18
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff3a 	bl	8000cc8 <lsm6dsl_read_xyz>
			//calculate L
			L_c = x + y + z;
 8000e54:	8abb      	ldrh	r3, [r7, #20]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	8a7b      	ldrh	r3, [r7, #18]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	8a3b      	ldrh	r3, [r7, #16]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	817b      	strh	r3, [r7, #10]
			L = L_c - L_p;
 8000e72:	897b      	ldrh	r3, [r7, #10]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	89bb      	ldrh	r3, [r7, #12]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	81fb      	strh	r3, [r7, #14]
			L_p = L_c;
 8000e86:	897b      	ldrh	r3, [r7, #10]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	81bb      	strh	r3, [r7, #12]

			//PWR->CR1 |= PWR_CR1_LPMS_STOP0;
			//SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
			HAL_Delay(1000);
 8000e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e90:	f000 fc58 	bl	8001744 <HAL_Delay>
			//__WFI();

			//turn on timer
			timer_init(TIM2);
 8000e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e98:	f000 fb4e 	bl	8001538 <timer_init>
			timer_set_ms(TIM2,2500); // 2500(5sec) -> 30000(1min)
 8000e9c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ea4:	f000 fb99 	bl	80015da <timer_set_ms>
			//Threshold
			while(L<3500 && L>-3500){ //stable
 8000ea8:	e03e      	b.n	8000f28 <main+0x150>
				flag = 0;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <main+0x174>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
				//Begin reading accelerometer values
				lsm6dsl_read_xyz(&x,&y,&z);
 8000eb0:	f107 0210 	add.w	r2, r7, #16
 8000eb4:	f107 0112 	add.w	r1, r7, #18
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff03 	bl	8000cc8 <lsm6dsl_read_xyz>
				//calculate L
				L_c = x + y + z;
 8000ec2:	8abb      	ldrh	r3, [r7, #20]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	8a7b      	ldrh	r3, [r7, #18]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	8a3b      	ldrh	r3, [r7, #16]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	817b      	strh	r3, [r7, #10]
				L = L_c - L_p;
 8000ee0:	897b      	ldrh	r3, [r7, #10]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	89bb      	ldrh	r3, [r7, #12]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	81fb      	strh	r3, [r7, #14]
				L_p = L_c;
 8000ef4:	897b      	ldrh	r3, [r7, #10]
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	81bb      	strh	r3, [r7, #12]

				//PWR->CR1 |= PWR_CR1_LPMS_STOP0;
				//SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
				HAL_Delay(1000);
 8000efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efe:	f000 fc21 	bl	8001744 <HAL_Delay>
				//__WFI();

				if(ble_flag == 1){
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <main+0x178>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10e      	bne.n	8000f28 <main+0x150>
					standby = 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
					// Send a string to the NORDIC UART service, remember to not include the newline
					unsigned char test_str[] = ("Ji&Johny");
 8000f0e:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <main+0x17c>)
 8000f10:	463b      	mov	r3, r7
 8000f12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f14:	c303      	stmia	r3!, {r0, r1}
 8000f16:	701a      	strb	r2, [r3, #0]
					updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8000f18:	463b      	mov	r3, r7
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	490d      	ldr	r1, [pc, #52]	; (8000f58 <main+0x180>)
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <main+0x184>)
 8000f24:	f7ff fd00 	bl	8000928 <updateCharValue>
			while(L<3500 && L>-3500){ //stable
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000f30:	4293      	cmp	r3, r2
 8000f32:	dc04      	bgt.n	8000f3e <main+0x166>
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <main+0x188>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	dab5      	bge.n	8000eaa <main+0xd2>
				}
			} //while
		} //if
		ble_flag=0;
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <main+0x178>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000f44:	4b01      	ldr	r3, [pc, #4]	; (8000f4c <main+0x174>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
		if(flag == 1){
 8000f4a:	e772      	b.n	8000e32 <main+0x5a>
 8000f4c:	200001c0 	.word	0x200001c0
 8000f50:	2000022c 	.word	0x2000022c
 8000f54:	0800442c 	.word	0x0800442c
 8000f58:	200001b8 	.word	0x200001b8
 8000f5c:	200001b0 	.word	0x200001b0
 8000f60:	fffff255 	.word	0xfffff255

08000f64 <TIM2_IRQHandler>:
	} //while
}

//Wake up accelerometer when it moves to save power
void TIM2_IRQHandler() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    flag = 1;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <TIM2_IRQHandler+0x1c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
    ble_flag = 1;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <TIM2_IRQHandler+0x20>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
	timer_reset(TIM2);
 8000f74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f78:	f000 fb10 	bl	800159c <timer_reset>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200001c0 	.word	0x200001c0
 8000f84:	2000022c 	.word	0x2000022c

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b096      	sub	sp, #88	; 0x58
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2244      	movs	r2, #68	; 0x44
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fca5 	bl	80038e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000faa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fae:	f000 ff0b 	bl	8001dc8 <HAL_PWREx_ControlVoltageScaling>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fb8:	f000 f902 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000fc8:	2370      	movs	r3, #112	; 0x70
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 ff4d 	bl	8001e74 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fe0:	f000 f8ee 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fb15 	bl	800262c <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001008:	f000 f8da 	bl	80011c0 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3758      	adds	r7, #88	; 0x58
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_SPI3_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_SPI3_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_SPI3_Init+0x74>)
 8001020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001024:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_SPI3_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_SPI3_Init+0x74>)
 800102e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001032:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_SPI3_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_SPI3_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_SPI3_Init+0x74>)
 8001042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001046:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI3_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_SPI3_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_SPI3_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_SPI3_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_SPI3_Init+0x74>)
 8001062:	2207      	movs	r2, #7
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_SPI3_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_SPI3_Init+0x74>)
 800106e:	2208      	movs	r2, #8
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_SPI3_Init+0x74>)
 8001074:	f001 fcc6 	bl	8002a04 <HAL_SPI_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 f89f 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001c8 	.word	0x200001c8
 800108c:	40003c00 	.word	0x40003c00

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_GPIO_Init+0x124>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <MX_GPIO_Init+0x124>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <MX_GPIO_Init+0x124>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MX_GPIO_Init+0x124>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f000 fe05 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001130:	4821      	ldr	r0, [pc, #132]	; (80011b8 <MX_GPIO_Init+0x128>)
 8001132:	f000 fdff 	bl	8001d34 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f000 fdf8 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001148:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4818      	ldr	r0, [pc, #96]	; (80011bc <MX_GPIO_Init+0x12c>)
 800115a:	f000 fc29 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800115e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f000 fc19 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MX_GPIO_Init+0x128>)
 8001198:	f000 fc0a 	bl	80019b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2017      	movs	r0, #23
 80011a2:	f000 fbce 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011a6:	2017      	movs	r0, #23
 80011a8:	f000 fbe7 	bl	800197a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	48001000 	.word	0x48001000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_MspInit+0x44>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_MspInit+0x44>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6613      	str	r3, [r2, #96]	; 0x60
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_MspInit+0x44>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_MspInit+0x44>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_MspInit+0x44>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_MspInit+0x44>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_SPI_MspInit+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d128      	bne.n	8001288 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_SPI_MspInit+0x80>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_SPI_MspInit+0x80>)
 800123c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_SPI_MspInit+0x80>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_SPI_MspInit+0x80>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_SPI_MspInit+0x80>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_SPI_MspInit+0x80>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001266:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001278:	2306      	movs	r3, #6
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_SPI_MspInit+0x84>)
 8001284:	f000 fb94 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40003c00 	.word	0x40003c00
 8001294:	40021000 	.word	0x40021000
 8001298:	48000800 	.word	0x48000800

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 fa0c 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <EXTI9_5_IRQHandler+0x14>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80012fa:	2040      	movs	r0, #64	; 0x40
 80012fc:	f000 fd32 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200001c4 	.word	0x200001c4

08001308 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00a      	b.n	8001330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800131a:	f3af 8000 	nop.w
 800131e:	4601      	mov	r1, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60ba      	str	r2, [r7, #8]
 8001326:	b2ca      	uxtb	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf0      	blt.n	800131a <_read+0x12>
	}

return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e009      	b.n	8001368 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf1      	blt.n	8001354 <_write+0x12>
	}
	return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x50>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x16>
		heap_end = &end;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <_sbrk+0x50>)
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <_sbrk+0x54>)
 8001390:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <_sbrk+0x50>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <_sbrk+0x50>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	466a      	mov	r2, sp
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d907      	bls.n	80013b6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80013a6:	f002 fafd 	bl	80039a4 <__errno>
 80013aa:	4603      	mov	r3, r0
 80013ac:	220c      	movs	r2, #12
 80013ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	e006      	b.n	80013c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <_sbrk+0x50>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a03      	ldr	r2, [pc, #12]	; (80013cc <_sbrk+0x50>)
 80013c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000230 	.word	0x20000230
 80013d0:	20000388 	.word	0x20000388

080013d4 <_close>:

int _close(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	return -1;
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fc:	605a      	str	r2, [r3, #4]
	return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_isatty>:

int _isatty(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
	return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <SystemInit+0x64>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <SystemInit+0x64>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <SystemInit+0x68>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <SystemInit+0x68>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <SystemInit+0x68>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <SystemInit+0x68>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <SystemInit+0x68>)
 8001468:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800146c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001470:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <SystemInit+0x68>)
 8001474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001478:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <SystemInit+0x68>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <SystemInit+0x68>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <SystemInit+0x68>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SystemInit+0x64>)
 800148e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001492:	609a      	str	r2, [r3, #8]
#endif
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	40021000 	.word	0x40021000

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <timer_init>:
 */

#include "timer.h"

void timer_init(TIM_TypeDef* timer)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  // 1. Stop the timer and clear out any timer state and reset all counters.
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <timer_init+0x60>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <timer_init+0x60>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6593      	str	r3, [r2, #88]	; 0x58
	timer->CR1 &= ~TIM_CR1_CEN;  // ~(0x00000001) => CEN = 0 : counter disabled ; CR1.CEN - 31.4.1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 0201 	bic.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
	timer->CNT = 0;    // reset all counters. ; CNT - 31.4.12
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

  // 2. Setup the timer to auto-reload when the max value is reached.
	// No need to if statement since TIM_ARR_ARR is the max value itself
	timer->ARR |= TIM_ARR_ARR;	// timer = auto-reload ; ARR - 31.4.15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c

  // 3. Enable the timer’s interrupt both internally and in the interrupt controller (NVIC).
	timer->DIER |= TIM_DIER_UIE; // Enable the timer’s interrupt ; interrupt enable 31.4.4
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60da      	str	r2, [r3, #12]
    //a. You will need to use the NVIC functions NVIC_EnableIRQ, NVIC_SetPriority with 	the parameter TIM2_IRQn
	NVIC_EnableIRQ(TIM2_IRQn);
 8001576:	201c      	movs	r0, #28
 8001578:	f7ff ff96 	bl	80014a8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 0); // priority = 0
 800157c:	2100      	movs	r1, #0
 800157e:	201c      	movs	r0, #28
 8001580:	f7ff ffb0 	bl	80014e4 <__NVIC_SetPriority>
	// therefore whenever 2000000 count -> interrupt
	//timer->ARR = 2000000; // 0x001E8480;
	//timer_set_ms(TIM2, 50);

  // 5. Enable the timer
	timer->CR1 |= TIM_CR1_CEN; //Enable the timer.
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000

0800159c <timer_reset>:
/*
 * Reset timer 2’s (TIM2) counters, but do not reset the entire TIM peripheral. The timer can be in the middle
of execution when it is reset and it’s counter will return to 0 when this function is called
 */
void timer_reset(TIM_TypeDef* timer)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    timer->DIER &= ~TIM_DIER_UIE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f023 0201 	bic.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60da      	str	r2, [r3, #12]
    timer->CNT = 0; // counter = 0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
    timer->SR &= ~TIM_SR_UIF; // SR = 0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f023 0201 	bic.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]
    timer->DIER |= TIM_DIER_UIE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60da      	str	r2, [r3, #12]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <timer_set_ms>:
/*
 * Set the period that the timer will fire (in milliseconds). A timer interrupt should be fired for each timer
period.
 */
void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	807b      	strh	r3, [r7, #2]
	timer_reset(TIM2);
 80015e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015ea:	f7ff ffd7 	bl	800159c <timer_reset>
	timer->ARR = 8000*period_ms; // 0x003D0900 = 4,000,000 -> 80000
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800160c:	f7ff ff16 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopForever+0x6>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopForever+0xe>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopForever+0x16>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f002 f9bb 	bl	80039b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163a:	f7ff fbcd 	bl	8000dd8 <main>

0800163e <LoopForever>:

LoopForever:
    b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001640:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800164c:	080044b4 	.word	0x080044b4
  ldr r2, =_sbss
 8001650:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001654:	20000384 	.word	0x20000384

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>

0800165a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f961 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f80e 	bl	800168c <HAL_InitTick>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	e001      	b.n	8001680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167c:	f7ff fda6 	bl	80011cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001680:	79fb      	ldrb	r3, [r7, #7]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_InitTick+0x6c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_InitTick+0x70>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_InitTick+0x6c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f96d 	bl	8001996 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d809      	bhi.n	80016dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 f937 	bl	8001942 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_InitTick+0x74>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e007      	b.n	80016ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e004      	b.n	80016ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e001      	b.n	80016ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000128 	.word	0x20000128
 80016fc:	20000120 	.word	0x20000120
 8001700:	20000124 	.word	0x20000124

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000128 	.word	0x20000128
 8001728:	20000234 	.word	0x20000234

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000234 	.word	0x20000234

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000128 	.word	0x20000128

0800178c <__NVIC_SetPriorityGrouping>:
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	e17f      	b.n	8001cc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8171 	beq.w	8001cba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d005      	beq.n	80019f0 <HAL_GPIO_Init+0x40>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d130      	bne.n	8001a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a26:	2201      	movs	r2, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 0201 	and.w	r2, r3, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d118      	bne.n	8001a90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d017      	beq.n	8001acc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	6939      	ldr	r1, [r7, #16]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80ac 	beq.w	8001cba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	4a5e      	ldr	r2, [pc, #376]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b7a:	4a5a      	ldr	r2, [pc, #360]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x242>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x338>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x23e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x33c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x23a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x340>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x236>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x344>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x232>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x348>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x22e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x34c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x22a>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x244>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x244>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x244>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x244>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x244>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x244>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x244>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c04:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c36:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_GPIO_Init+0x350>)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f47f ae78 	bne.w	80019c0 <HAL_GPIO_Init+0x10>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	48000c00 	.word	0x48000c00
 8001cf4:	48001000 	.word	0x48001000
 8001cf8:	48001400 	.word	0x48001400
 8001cfc:	48001800 	.word	0x48001800
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f806 	bl	8001d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40007000 	.word	0x40007000

08001dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd6:	d130      	bne.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de4:	d038      	beq.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2232      	movs	r2, #50	; 0x32
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0c:	e002      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e20:	d102      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f2      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e34:	d110      	bne.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e00f      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e46:	d007      	beq.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	20000120 	.word	0x20000120
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e3ca      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b97      	ldr	r3, [pc, #604]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b94      	ldr	r3, [pc, #592]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80e4 	beq.w	8002070 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4a>
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	f040 808b 	bne.w	8001fcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 8087 	bne.w	8001fcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x62>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e3a2      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x7c>
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eee:	e005      	b.n	8001efc <HAL_RCC_OscConfig+0x88>
 8001ef0:	4b7c      	ldr	r3, [pc, #496]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d223      	bcs.n	8001f48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fd1d 	bl	8002944 <RCC_SetFlashLatencyFromMSIRange>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e383      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f14:	4b73      	ldr	r3, [pc, #460]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a72      	ldr	r2, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	496d      	ldr	r1, [pc, #436]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4968      	ldr	r1, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
 8001f46:	e025      	b.n	8001f94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f48:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a65      	ldr	r2, [pc, #404]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4960      	ldr	r1, [pc, #384]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f66:	4b5f      	ldr	r3, [pc, #380]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	495b      	ldr	r1, [pc, #364]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fcdd 	bl	8002944 <RCC_SetFlashLatencyFromMSIRange>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e343      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f94:	f000 fc4a 	bl	800282c <HAL_RCC_GetSysClockFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	4950      	ldr	r1, [pc, #320]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_RCC_OscConfig+0x278>)
 8001fb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fb4:	4b4e      	ldr	r3, [pc, #312]	; (80020f0 <HAL_RCC_OscConfig+0x27c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fb67 	bl	800168c <HAL_InitTick>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d052      	beq.n	800206e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	e327      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d032      	beq.n	800203a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a42      	ldr	r2, [pc, #264]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fba4 	bl	800172c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fba0 	bl	800172c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e310      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a36      	ldr	r2, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4931      	ldr	r1, [pc, #196]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002024:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	492c      	ldr	r1, [pc, #176]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	e01a      	b.n	8002070 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002046:	f7ff fb71 	bl	800172c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800204e:	f7ff fb6d 	bl	800172c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e2dd      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x1da>
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800206e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d074      	beq.n	8002166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b08      	cmp	r3, #8
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x21a>
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	d10e      	bne.n	80020a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d10b      	bne.n	80020a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d064      	beq.n	8002164 <HAL_RCC_OscConfig+0x2f0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d160      	bne.n	8002164 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e2ba      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x24a>
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	e026      	b.n	800210c <HAL_RCC_OscConfig+0x298>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c6:	d115      	bne.n	80020f4 <HAL_RCC_OscConfig+0x280>
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a02      	ldr	r2, [pc, #8]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e014      	b.n	800210c <HAL_RCC_OscConfig+0x298>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08004438 	.word	0x08004438
 80020ec:	20000120 	.word	0x20000120
 80020f0:	20000124 	.word	0x20000124
 80020f4:	4ba0      	ldr	r3, [pc, #640]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a9f      	ldr	r2, [pc, #636]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b9d      	ldr	r3, [pc, #628]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a9c      	ldr	r2, [pc, #624]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fb0a 	bl	800172c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fb06 	bl	800172c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e276      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	4b92      	ldr	r3, [pc, #584]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x2a8>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff faf6 	bl	800172c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff faf2 	bl	800172c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e262      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x2d0>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d060      	beq.n	8002234 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x310>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d119      	bne.n	80021b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d116      	bne.n	80021b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_OscConfig+0x328>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e23f      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	4973      	ldr	r1, [pc, #460]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b0:	e040      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d023      	beq.n	8002202 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ba:	4b6f      	ldr	r3, [pc, #444]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6e      	ldr	r2, [pc, #440]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff fab1 	bl	800172c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff faad 	bl	800172c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e21d      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e0:	4b65      	ldr	r3, [pc, #404]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	495f      	ldr	r1, [pc, #380]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e018      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5c      	ldr	r2, [pc, #368]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800220c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff fa8d 	bl	800172c <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff fa89 	bl	800172c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1f9      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d03c      	beq.n	80022ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01c      	beq.n	8002282 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fa68 	bl	800172c <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fa64 	bl	800172c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1d4      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ef      	beq.n	8002260 <HAL_RCC_OscConfig+0x3ec>
 8002280:	e01b      	b.n	80022ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002288:	4a3b      	ldr	r2, [pc, #236]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7ff fa4b 	bl	800172c <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7ff fa47 	bl	800172c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1b7      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ef      	bne.n	800229a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a6 	beq.w	8002414 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	; 0x58
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f0:	2301      	movs	r3, #1
 80022f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_RCC_OscConfig+0x508>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d118      	bne.n	8002332 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_RCC_OscConfig+0x508>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_RCC_OscConfig+0x508>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230c:	f7ff fa0e 	bl	800172c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7ff fa0a 	bl	800172c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e17a      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_RCC_OscConfig+0x508>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <HAL_RCC_OscConfig+0x4d8>
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234a:	e029      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d115      	bne.n	8002380 <HAL_RCC_OscConfig+0x50c>
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	4a03      	ldr	r2, [pc, #12]	; (8002378 <HAL_RCC_OscConfig+0x504>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
 8002380:	4b9c      	ldr	r3, [pc, #624]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4a9b      	ldr	r2, [pc, #620]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002390:	4b98      	ldr	r3, [pc, #608]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	4a97      	ldr	r2, [pc, #604]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d016      	beq.n	80023d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7ff f9c0 	bl	800172c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7ff f9bc 	bl	800172c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e12a      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c6:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ed      	beq.n	80023b0 <HAL_RCC_OscConfig+0x53c>
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7ff f9a9 	bl	800172c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff f9a5 	bl	800172c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e113      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f4:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ed      	bne.n	80023de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002402:	7ffb      	ldrb	r3, [r7, #31]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	4a79      	ldr	r2, [pc, #484]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002412:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80fe 	beq.w	800261a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	2b02      	cmp	r3, #2
 8002424:	f040 80d0 	bne.w	80025c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002428:	4b72      	ldr	r3, [pc, #456]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	429a      	cmp	r2, r3
 800243a:	d130      	bne.n	800249e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	3b01      	subs	r3, #1
 8002448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d127      	bne.n	800249e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d11f      	bne.n	800249e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002468:	2a07      	cmp	r2, #7
 800246a:	bf14      	ite	ne
 800246c:	2201      	movne	r2, #1
 800246e:	2200      	moveq	r2, #0
 8002470:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002472:	4293      	cmp	r3, r2
 8002474:	d113      	bne.n	800249e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d109      	bne.n	800249e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d06e      	beq.n	800257c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d069      	beq.n	8002578 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0ad      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80024c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024cc:	f7ff f92e 	bl	800172c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff f92a 	bl	800172c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e09a      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e6:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <HAL_RCC_OscConfig+0x784>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002502:	3a01      	subs	r2, #1
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800250c:	0212      	lsls	r2, r2, #8
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002514:	0852      	lsrs	r2, r2, #1
 8002516:	3a01      	subs	r2, #1
 8002518:	0552      	lsls	r2, r2, #21
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002520:	0852      	lsrs	r2, r2, #1
 8002522:	3a01      	subs	r2, #1
 8002524:	0652      	lsls	r2, r2, #25
 8002526:	4311      	orrs	r1, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800252c:	0912      	lsrs	r2, r2, #4
 800252e:	0452      	lsls	r2, r2, #17
 8002530:	430a      	orrs	r2, r1
 8002532:	4930      	ldr	r1, [pc, #192]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 8002534:	4313      	orrs	r3, r2
 8002536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2d      	ldr	r2, [pc, #180]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800254a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002550:	f7ff f8ec 	bl	800172c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7ff f8e8 	bl	800172c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e058      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002576:	e050      	b.n	800261a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e04f      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d148      	bne.n	800261a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800258e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002592:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 800259a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a0:	f7ff f8c4 	bl	800172c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7ff f8c0 	bl	800172c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e030      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x734>
 80025c6:	e028      	b.n	800261a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d023      	beq.n	8002616 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_RCC_OscConfig+0x780>)
 80025d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7ff f8a7 	bl	800172c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e0:	e00c      	b.n	80025fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7ff f8a3 	bl	800172c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d905      	bls.n	80025fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e013      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
 80025f4:	40021000 	.word	0x40021000
 80025f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_OscConfig+0x7b0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ec      	bne.n	80025e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_OscConfig+0x7b0>)
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	4905      	ldr	r1, [pc, #20]	; (8002624 <HAL_RCC_OscConfig+0x7b0>)
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_RCC_OscConfig+0x7b4>)
 8002610:	4013      	ands	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
 8002614:	e001      	b.n	800261a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	feeefffc 	.word	0xfeeefffc

0800262c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0e7      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b72      	ldr	r3, [pc, #456]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4970      	ldr	r1, [pc, #448]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b6e      	ldr	r3, [pc, #440]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0cf      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002688:	429a      	cmp	r2, r3
 800268a:	d908      	bls.n	800269e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4960      	ldr	r1, [pc, #384]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d04c      	beq.n	8002744 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d121      	bne.n	8002702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0a6      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ca:	4b54      	ldr	r3, [pc, #336]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d115      	bne.n	8002702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e09a      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026e2:	4b4e      	ldr	r3, [pc, #312]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e08e      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e086      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4943      	ldr	r1, [pc, #268]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002714:	f7ff f80a 	bl	800172c <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7ff f806 	bl	800172c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e06e      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275c:	429a      	cmp	r2, r3
 800275e:	d208      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	492b      	ldr	r1, [pc, #172]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d210      	bcs.n	80027a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 0207 	bic.w	r2, r3, #7
 8002788:	4923      	ldr	r1, [pc, #140]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCC_ClockConfig+0x1ec>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e036      	b.n	8002810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4918      	ldr	r1, [pc, #96]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4910      	ldr	r1, [pc, #64]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e0:	f000 f824 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	490b      	ldr	r1, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1f4>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1f8>)
 80027fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1fc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe ff41 	bl	800168c <HAL_InitTick>
 800280a:	4603      	mov	r3, r0
 800280c:	72fb      	strb	r3, [r7, #11]

  return status;
 800280e:	7afb      	ldrb	r3, [r7, #11]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40022000 	.word	0x40022000
 800281c:	40021000 	.word	0x40021000
 8002820:	08004438 	.word	0x08004438
 8002824:	20000120 	.word	0x20000120
 8002828:	20000124 	.word	0x20000124

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002844:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x34>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d121      	bne.n	800289e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d11e      	bne.n	800289e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800286c:	4b31      	ldr	r3, [pc, #196]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 800286e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e005      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_RCC_GetSysClockFreq+0x10c>)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10d      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_RCC_GetSysClockFreq+0x110>)
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	e004      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_RCC_GetSysClockFreq+0x114>)
 80028b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d134      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d003      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0xac>
 80028d0:	e005      	b.n	80028de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_RCC_GetSysClockFreq+0x110>)
 80028d4:	617b      	str	r3, [r7, #20]
      break;
 80028d6:	e005      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_RCC_GetSysClockFreq+0x114>)
 80028da:	617b      	str	r3, [r7, #20]
      break;
 80028dc:	e002      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	617b      	str	r3, [r7, #20]
      break;
 80028e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	3301      	adds	r3, #1
 80028f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	fb03 f202 	mul.w	r2, r3, r2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_RCC_GetSysClockFreq+0x108>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	0e5b      	lsrs	r3, r3, #25
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	3301      	adds	r3, #1
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002924:	69bb      	ldr	r3, [r7, #24]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	08004448 	.word	0x08004448
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200

08002944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002950:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800295c:	f7ff fa26 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 8002960:	6178      	str	r0, [r7, #20]
 8002962:	e014      	b.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	4a24      	ldr	r2, [pc, #144]	; (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	6593      	str	r3, [r2, #88]	; 0x58
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800297c:	f7ff fa16 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 8002980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002994:	d10b      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d919      	bls.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2ba0      	cmp	r3, #160	; 0xa0
 80029a0:	d902      	bls.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a2:	2302      	movs	r3, #2
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	e013      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029a8:	2301      	movs	r3, #1
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e010      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b80      	cmp	r3, #128	; 0x80
 80029b2:	d902      	bls.n	80029ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029b4:	2303      	movs	r3, #3
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	e00a      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b80      	cmp	r3, #128	; 0x80
 80029be:	d102      	bne.n	80029c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c0:	2302      	movs	r3, #2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	e004      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b70      	cmp	r3, #112	; 0x70
 80029ca:	d101      	bne.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029cc:	2301      	movs	r3, #1
 80029ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0207 	bic.w	r2, r3, #7
 80029d8:	4909      	ldr	r1, [pc, #36]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40022000 	.word	0x40022000

08002a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e095      	b.n	8002b42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d108      	bne.n	8002a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a26:	d009      	beq.n	8002a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
 8002a2e:	e005      	b.n	8002a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fbdc 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a7c:	d902      	bls.n	8002a84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e002      	b.n	8002a8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a92:	d007      	beq.n	8002aa4 <HAL_SPI_Init+0xa0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a9c:	d002      	beq.n	8002aa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	ea42 0103 	orr.w	r1, r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	f003 0204 	and.w	r2, r3, #4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b20:	ea42 0103 	orr.w	r1, r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b088      	sub	sp, #32
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_SPI_Transmit+0x22>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e15f      	b.n	8002e2c <HAL_SPI_Transmit+0x2e2>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b74:	f7fe fdda 	bl	800172c <HAL_GetTick>
 8002b78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d002      	beq.n	8002b90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b8e:	e148      	b.n	8002e22 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Transmit+0x52>
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ba0:	e13f      	b.n	8002e22 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	88fa      	ldrh	r2, [r7, #6]
 8002bc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	d10f      	bne.n	8002c0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d007      	beq.n	8002c2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c34:	d94f      	bls.n	8002cd6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Transmit+0xfa>
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d142      	bne.n	8002cca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	1c9a      	adds	r2, r3, #2
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c68:	e02f      	b.n	8002cca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d112      	bne.n	8002c9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c9c:	e015      	b.n	8002cca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9e:	f7fe fd45 	bl	800172c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d803      	bhi.n	8002cb6 <HAL_SPI_Transmit+0x16c>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d102      	bne.n	8002cbc <HAL_SPI_Transmit+0x172>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002cc8:	e0ab      	b.n	8002e22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ca      	bne.n	8002c6a <HAL_SPI_Transmit+0x120>
 8002cd4:	e080      	b.n	8002dd8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Transmit+0x19a>
 8002cde:	8afb      	ldrh	r3, [r7, #22]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d174      	bne.n	8002dce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d912      	bls.n	8002d14 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	1c9a      	adds	r2, r3, #2
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b02      	subs	r3, #2
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d12:	e05c      	b.n	8002dce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d3a:	e048      	b.n	8002dce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d12b      	bne.n	8002da2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d912      	bls.n	8002d7a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	1c9a      	adds	r2, r3, #2
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b02      	subs	r3, #2
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d78:	e029      	b.n	8002dce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	330c      	adds	r3, #12
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002da0:	e015      	b.n	8002dce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da2:	f7fe fcc3 	bl	800172c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d803      	bhi.n	8002dba <HAL_SPI_Transmit+0x270>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d102      	bne.n	8002dc0 <HAL_SPI_Transmit+0x276>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002dcc:	e029      	b.n	8002e22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1b1      	bne.n	8002d3c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fb69 	bl	80034b4 <SPI_EndRxTxTransaction>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e003      	b.n	8002e22 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e42:	2301      	movs	r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x26>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e20a      	b.n	8003270 <HAL_SPI_TransmitReceive+0x43c>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e62:	f7fe fc63 	bl	800172c <HAL_GetTick>
 8002e66:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e6e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e7e:	7efb      	ldrb	r3, [r7, #27]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d00e      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x6e>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8a:	d106      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x66>
 8002e94:	7efb      	ldrb	r3, [r7, #27]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d003      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ea0:	e1e0      	b.n	8003264 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x80>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x80>
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002eba:	e1d3      	b.n	8003264 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d003      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2205      	movs	r2, #5
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f12:	d802      	bhi.n	8002f1a <HAL_SPI_TransmitReceive+0xe6>
 8002f14:	8a3b      	ldrh	r3, [r7, #16]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d908      	bls.n	8002f2c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e007      	b.n	8002f3c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b40      	cmp	r3, #64	; 0x40
 8002f48:	d007      	beq.n	8002f5a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f62:	f240 8081 	bls.w	8003068 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x140>
 8002f6e:	8a7b      	ldrh	r3, [r7, #18]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d16d      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	1c9a      	adds	r2, r3, #2
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f98:	e05a      	b.n	8003050 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d11b      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x1ac>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x1ac>
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d113      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	881a      	ldrh	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d11c      	bne.n	8003028 <HAL_SPI_TransmitReceive+0x1f4>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	b292      	uxth	r2, r2
 8003006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	1c9a      	adds	r2, r3, #2
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003024:	2301      	movs	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003028:	f7fe fb80 	bl	800172c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003034:	429a      	cmp	r2, r3
 8003036:	d80b      	bhi.n	8003050 <HAL_SPI_TransmitReceive+0x21c>
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d007      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800304e:	e109      	b.n	8003264 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d19f      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x166>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d199      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x166>
 8003066:	e0e3      	b.n	8003230 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x244>
 8003070:	8a7b      	ldrh	r3, [r7, #18]
 8003072:	2b01      	cmp	r3, #1
 8003074:	f040 80cf 	bne.w	8003216 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d912      	bls.n	80030a8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	1c9a      	adds	r2, r3, #2
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b02      	subs	r3, #2
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030a6:	e0b6      	b.n	8003216 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ce:	e0a2      	b.n	8003216 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d134      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x314>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02f      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x314>
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d12c      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d912      	bls.n	800311e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	881a      	ldrh	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	1c9a      	adds	r2, r3, #2
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b02      	subs	r3, #2
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800311c:	e012      	b.n	8003144 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d148      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x3b4>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d042      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d923      	bls.n	80031b6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	b292      	uxth	r2, r2
 800317a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	1c9a      	adds	r2, r3, #2
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b02      	subs	r3, #2
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d81f      	bhi.n	80031e4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	e016      	b.n	80031e4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f103 020c 	add.w	r2, r3, #12
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031e4:	2301      	movs	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031e8:	f7fe faa0 	bl	800172c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d803      	bhi.n	8003200 <HAL_SPI_TransmitReceive+0x3cc>
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d102      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x3d2>
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003214:	e026      	b.n	8003264 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f af57 	bne.w	80030d0 <HAL_SPI_TransmitReceive+0x29c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	f47f af50 	bne.w	80030d0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f93d 	bl	80034b4 <SPI_EndRxTxTransaction>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325a:	e003      	b.n	8003264 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800326c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003270:	4618      	mov	r0, r3
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003288:	f7fe fa50 	bl	800172c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4413      	add	r3, r2
 8003296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003298:	f7fe fa48 	bl	800172c <HAL_GetTick>
 800329c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329e:	4b39      	ldr	r3, [pc, #228]	; (8003384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	015b      	lsls	r3, r3, #5
 80032a4:	0d1b      	lsrs	r3, r3, #20
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ae:	e054      	b.n	800335a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d050      	beq.n	800335a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b8:	f7fe fa38 	bl	800172c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d902      	bls.n	80032ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d13d      	bne.n	800334a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e6:	d111      	bne.n	800330c <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f0:	d004      	beq.n	80032fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d107      	bne.n	800330c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003314:	d10f      	bne.n	8003336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e017      	b.n	800337a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3b01      	subs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	429a      	cmp	r2, r3
 8003376:	d19b      	bne.n	80032b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000120 	.word	0x20000120

08003388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800339a:	f7fe f9c7 	bl	800172c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033aa:	f7fe f9bf 	bl	800172c <HAL_GetTick>
 80033ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033b8:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	00da      	lsls	r2, r3, #3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	0d1b      	lsrs	r3, r3, #20
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033d0:	e060      	b.n	8003494 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033d8:	d107      	bne.n	80033ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d050      	beq.n	8003494 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033f2:	f7fe f99b 	bl	800172c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fe:	429a      	cmp	r2, r3
 8003400:	d902      	bls.n	8003408 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d13d      	bne.n	8003484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003416:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003420:	d111      	bne.n	8003446 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342a:	d004      	beq.n	8003436 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003434:	d107      	bne.n	8003446 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003444:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344e:	d10f      	bne.n	8003470 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e010      	b.n	80034a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3b01      	subs	r3, #1
 8003492:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d196      	bne.n	80033d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3728      	adds	r7, #40	; 0x28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000120 	.word	0x20000120

080034b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff ff5b 	bl	8003388 <SPI_WaitFifoStateUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e027      	b.n	8003538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff fec0 	bl	8003278 <SPI_WaitFlagStateUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e014      	b.n	8003538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff ff34 	bl	8003388 <SPI_WaitFifoStateUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e000      	b.n	8003538 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <malloc>:
 8003540:	4b02      	ldr	r3, [pc, #8]	; (800354c <malloc+0xc>)
 8003542:	4601      	mov	r1, r0
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	f000 b82b 	b.w	80035a0 <_malloc_r>
 800354a:	bf00      	nop
 800354c:	20000184 	.word	0x20000184

08003550 <free>:
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <free+0xc>)
 8003552:	4601      	mov	r1, r0
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f000 ba61 	b.w	8003a1c <_free_r>
 800355a:	bf00      	nop
 800355c:	20000184 	.word	0x20000184

08003560 <sbrk_aligned>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	4e0e      	ldr	r6, [pc, #56]	; (800359c <sbrk_aligned+0x3c>)
 8003564:	460c      	mov	r4, r1
 8003566:	6831      	ldr	r1, [r6, #0]
 8003568:	4605      	mov	r5, r0
 800356a:	b911      	cbnz	r1, 8003572 <sbrk_aligned+0x12>
 800356c:	f000 f9f8 	bl	8003960 <_sbrk_r>
 8003570:	6030      	str	r0, [r6, #0]
 8003572:	4621      	mov	r1, r4
 8003574:	4628      	mov	r0, r5
 8003576:	f000 f9f3 	bl	8003960 <_sbrk_r>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	d00a      	beq.n	8003594 <sbrk_aligned+0x34>
 800357e:	1cc4      	adds	r4, r0, #3
 8003580:	f024 0403 	bic.w	r4, r4, #3
 8003584:	42a0      	cmp	r0, r4
 8003586:	d007      	beq.n	8003598 <sbrk_aligned+0x38>
 8003588:	1a21      	subs	r1, r4, r0
 800358a:	4628      	mov	r0, r5
 800358c:	f000 f9e8 	bl	8003960 <_sbrk_r>
 8003590:	3001      	adds	r0, #1
 8003592:	d101      	bne.n	8003598 <sbrk_aligned+0x38>
 8003594:	f04f 34ff 	mov.w	r4, #4294967295
 8003598:	4620      	mov	r0, r4
 800359a:	bd70      	pop	{r4, r5, r6, pc}
 800359c:	2000023c 	.word	0x2000023c

080035a0 <_malloc_r>:
 80035a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035a4:	1ccd      	adds	r5, r1, #3
 80035a6:	f025 0503 	bic.w	r5, r5, #3
 80035aa:	3508      	adds	r5, #8
 80035ac:	2d0c      	cmp	r5, #12
 80035ae:	bf38      	it	cc
 80035b0:	250c      	movcc	r5, #12
 80035b2:	2d00      	cmp	r5, #0
 80035b4:	4607      	mov	r7, r0
 80035b6:	db01      	blt.n	80035bc <_malloc_r+0x1c>
 80035b8:	42a9      	cmp	r1, r5
 80035ba:	d905      	bls.n	80035c8 <_malloc_r+0x28>
 80035bc:	230c      	movs	r3, #12
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	2600      	movs	r6, #0
 80035c2:	4630      	mov	r0, r6
 80035c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800369c <_malloc_r+0xfc>
 80035cc:	f000 f868 	bl	80036a0 <__malloc_lock>
 80035d0:	f8d8 3000 	ldr.w	r3, [r8]
 80035d4:	461c      	mov	r4, r3
 80035d6:	bb5c      	cbnz	r4, 8003630 <_malloc_r+0x90>
 80035d8:	4629      	mov	r1, r5
 80035da:	4638      	mov	r0, r7
 80035dc:	f7ff ffc0 	bl	8003560 <sbrk_aligned>
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	4604      	mov	r4, r0
 80035e4:	d155      	bne.n	8003692 <_malloc_r+0xf2>
 80035e6:	f8d8 4000 	ldr.w	r4, [r8]
 80035ea:	4626      	mov	r6, r4
 80035ec:	2e00      	cmp	r6, #0
 80035ee:	d145      	bne.n	800367c <_malloc_r+0xdc>
 80035f0:	2c00      	cmp	r4, #0
 80035f2:	d048      	beq.n	8003686 <_malloc_r+0xe6>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	4631      	mov	r1, r6
 80035f8:	4638      	mov	r0, r7
 80035fa:	eb04 0903 	add.w	r9, r4, r3
 80035fe:	f000 f9af 	bl	8003960 <_sbrk_r>
 8003602:	4581      	cmp	r9, r0
 8003604:	d13f      	bne.n	8003686 <_malloc_r+0xe6>
 8003606:	6821      	ldr	r1, [r4, #0]
 8003608:	1a6d      	subs	r5, r5, r1
 800360a:	4629      	mov	r1, r5
 800360c:	4638      	mov	r0, r7
 800360e:	f7ff ffa7 	bl	8003560 <sbrk_aligned>
 8003612:	3001      	adds	r0, #1
 8003614:	d037      	beq.n	8003686 <_malloc_r+0xe6>
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	442b      	add	r3, r5
 800361a:	6023      	str	r3, [r4, #0]
 800361c:	f8d8 3000 	ldr.w	r3, [r8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d038      	beq.n	8003696 <_malloc_r+0xf6>
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	42a2      	cmp	r2, r4
 8003628:	d12b      	bne.n	8003682 <_malloc_r+0xe2>
 800362a:	2200      	movs	r2, #0
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e00f      	b.n	8003650 <_malloc_r+0xb0>
 8003630:	6822      	ldr	r2, [r4, #0]
 8003632:	1b52      	subs	r2, r2, r5
 8003634:	d41f      	bmi.n	8003676 <_malloc_r+0xd6>
 8003636:	2a0b      	cmp	r2, #11
 8003638:	d917      	bls.n	800366a <_malloc_r+0xca>
 800363a:	1961      	adds	r1, r4, r5
 800363c:	42a3      	cmp	r3, r4
 800363e:	6025      	str	r5, [r4, #0]
 8003640:	bf18      	it	ne
 8003642:	6059      	strne	r1, [r3, #4]
 8003644:	6863      	ldr	r3, [r4, #4]
 8003646:	bf08      	it	eq
 8003648:	f8c8 1000 	streq.w	r1, [r8]
 800364c:	5162      	str	r2, [r4, r5]
 800364e:	604b      	str	r3, [r1, #4]
 8003650:	4638      	mov	r0, r7
 8003652:	f104 060b 	add.w	r6, r4, #11
 8003656:	f000 f829 	bl	80036ac <__malloc_unlock>
 800365a:	f026 0607 	bic.w	r6, r6, #7
 800365e:	1d23      	adds	r3, r4, #4
 8003660:	1af2      	subs	r2, r6, r3
 8003662:	d0ae      	beq.n	80035c2 <_malloc_r+0x22>
 8003664:	1b9b      	subs	r3, r3, r6
 8003666:	50a3      	str	r3, [r4, r2]
 8003668:	e7ab      	b.n	80035c2 <_malloc_r+0x22>
 800366a:	42a3      	cmp	r3, r4
 800366c:	6862      	ldr	r2, [r4, #4]
 800366e:	d1dd      	bne.n	800362c <_malloc_r+0x8c>
 8003670:	f8c8 2000 	str.w	r2, [r8]
 8003674:	e7ec      	b.n	8003650 <_malloc_r+0xb0>
 8003676:	4623      	mov	r3, r4
 8003678:	6864      	ldr	r4, [r4, #4]
 800367a:	e7ac      	b.n	80035d6 <_malloc_r+0x36>
 800367c:	4634      	mov	r4, r6
 800367e:	6876      	ldr	r6, [r6, #4]
 8003680:	e7b4      	b.n	80035ec <_malloc_r+0x4c>
 8003682:	4613      	mov	r3, r2
 8003684:	e7cc      	b.n	8003620 <_malloc_r+0x80>
 8003686:	230c      	movs	r3, #12
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	4638      	mov	r0, r7
 800368c:	f000 f80e 	bl	80036ac <__malloc_unlock>
 8003690:	e797      	b.n	80035c2 <_malloc_r+0x22>
 8003692:	6025      	str	r5, [r4, #0]
 8003694:	e7dc      	b.n	8003650 <_malloc_r+0xb0>
 8003696:	605b      	str	r3, [r3, #4]
 8003698:	deff      	udf	#255	; 0xff
 800369a:	bf00      	nop
 800369c:	20000238 	.word	0x20000238

080036a0 <__malloc_lock>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__malloc_lock+0x8>)
 80036a2:	f000 b9aa 	b.w	80039fa <__retarget_lock_acquire_recursive>
 80036a6:	bf00      	nop
 80036a8:	20000380 	.word	0x20000380

080036ac <__malloc_unlock>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__malloc_unlock+0x8>)
 80036ae:	f000 b9a5 	b.w	80039fc <__retarget_lock_release_recursive>
 80036b2:	bf00      	nop
 80036b4:	20000380 	.word	0x20000380

080036b8 <std>:
 80036b8:	2300      	movs	r3, #0
 80036ba:	b510      	push	{r4, lr}
 80036bc:	4604      	mov	r4, r0
 80036be:	e9c0 3300 	strd	r3, r3, [r0]
 80036c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036c6:	6083      	str	r3, [r0, #8]
 80036c8:	8181      	strh	r1, [r0, #12]
 80036ca:	6643      	str	r3, [r0, #100]	; 0x64
 80036cc:	81c2      	strh	r2, [r0, #14]
 80036ce:	6183      	str	r3, [r0, #24]
 80036d0:	4619      	mov	r1, r3
 80036d2:	2208      	movs	r2, #8
 80036d4:	305c      	adds	r0, #92	; 0x5c
 80036d6:	f000 f906 	bl	80038e6 <memset>
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <std+0x58>)
 80036dc:	6263      	str	r3, [r4, #36]	; 0x24
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <std+0x5c>)
 80036e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <std+0x60>)
 80036e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <std+0x64>)
 80036e8:	6323      	str	r3, [r4, #48]	; 0x30
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <std+0x68>)
 80036ec:	6224      	str	r4, [r4, #32]
 80036ee:	429c      	cmp	r4, r3
 80036f0:	d006      	beq.n	8003700 <std+0x48>
 80036f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80036f6:	4294      	cmp	r4, r2
 80036f8:	d002      	beq.n	8003700 <std+0x48>
 80036fa:	33d0      	adds	r3, #208	; 0xd0
 80036fc:	429c      	cmp	r4, r3
 80036fe:	d105      	bne.n	800370c <std+0x54>
 8003700:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003708:	f000 b976 	b.w	80039f8 <__retarget_lock_init_recursive>
 800370c:	bd10      	pop	{r4, pc}
 800370e:	bf00      	nop
 8003710:	08003861 	.word	0x08003861
 8003714:	08003883 	.word	0x08003883
 8003718:	080038bb 	.word	0x080038bb
 800371c:	080038df 	.word	0x080038df
 8003720:	20000240 	.word	0x20000240

08003724 <stdio_exit_handler>:
 8003724:	4a02      	ldr	r2, [pc, #8]	; (8003730 <stdio_exit_handler+0xc>)
 8003726:	4903      	ldr	r1, [pc, #12]	; (8003734 <stdio_exit_handler+0x10>)
 8003728:	4803      	ldr	r0, [pc, #12]	; (8003738 <stdio_exit_handler+0x14>)
 800372a:	f000 b869 	b.w	8003800 <_fwalk_sglue>
 800372e:	bf00      	nop
 8003730:	2000012c 	.word	0x2000012c
 8003734:	08004169 	.word	0x08004169
 8003738:	20000138 	.word	0x20000138

0800373c <cleanup_stdio>:
 800373c:	6841      	ldr	r1, [r0, #4]
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <cleanup_stdio+0x34>)
 8003740:	4299      	cmp	r1, r3
 8003742:	b510      	push	{r4, lr}
 8003744:	4604      	mov	r4, r0
 8003746:	d001      	beq.n	800374c <cleanup_stdio+0x10>
 8003748:	f000 fd0e 	bl	8004168 <_fflush_r>
 800374c:	68a1      	ldr	r1, [r4, #8]
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <cleanup_stdio+0x38>)
 8003750:	4299      	cmp	r1, r3
 8003752:	d002      	beq.n	800375a <cleanup_stdio+0x1e>
 8003754:	4620      	mov	r0, r4
 8003756:	f000 fd07 	bl	8004168 <_fflush_r>
 800375a:	68e1      	ldr	r1, [r4, #12]
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <cleanup_stdio+0x3c>)
 800375e:	4299      	cmp	r1, r3
 8003760:	d004      	beq.n	800376c <cleanup_stdio+0x30>
 8003762:	4620      	mov	r0, r4
 8003764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003768:	f000 bcfe 	b.w	8004168 <_fflush_r>
 800376c:	bd10      	pop	{r4, pc}
 800376e:	bf00      	nop
 8003770:	20000240 	.word	0x20000240
 8003774:	200002a8 	.word	0x200002a8
 8003778:	20000310 	.word	0x20000310

0800377c <global_stdio_init.part.0>:
 800377c:	b510      	push	{r4, lr}
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <global_stdio_init.part.0+0x30>)
 8003780:	4c0b      	ldr	r4, [pc, #44]	; (80037b0 <global_stdio_init.part.0+0x34>)
 8003782:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <global_stdio_init.part.0+0x38>)
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	4620      	mov	r0, r4
 8003788:	2200      	movs	r2, #0
 800378a:	2104      	movs	r1, #4
 800378c:	f7ff ff94 	bl	80036b8 <std>
 8003790:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003794:	2201      	movs	r2, #1
 8003796:	2109      	movs	r1, #9
 8003798:	f7ff ff8e 	bl	80036b8 <std>
 800379c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80037a0:	2202      	movs	r2, #2
 80037a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a6:	2112      	movs	r1, #18
 80037a8:	f7ff bf86 	b.w	80036b8 <std>
 80037ac:	20000378 	.word	0x20000378
 80037b0:	20000240 	.word	0x20000240
 80037b4:	08003725 	.word	0x08003725

080037b8 <__sfp_lock_acquire>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__sfp_lock_acquire+0x8>)
 80037ba:	f000 b91e 	b.w	80039fa <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	20000381 	.word	0x20000381

080037c4 <__sfp_lock_release>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__sfp_lock_release+0x8>)
 80037c6:	f000 b919 	b.w	80039fc <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000381 	.word	0x20000381

080037d0 <__sinit>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	4604      	mov	r4, r0
 80037d4:	f7ff fff0 	bl	80037b8 <__sfp_lock_acquire>
 80037d8:	6a23      	ldr	r3, [r4, #32]
 80037da:	b11b      	cbz	r3, 80037e4 <__sinit+0x14>
 80037dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e0:	f7ff bff0 	b.w	80037c4 <__sfp_lock_release>
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <__sinit+0x28>)
 80037e6:	6223      	str	r3, [r4, #32]
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__sinit+0x2c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f5      	bne.n	80037dc <__sinit+0xc>
 80037f0:	f7ff ffc4 	bl	800377c <global_stdio_init.part.0>
 80037f4:	e7f2      	b.n	80037dc <__sinit+0xc>
 80037f6:	bf00      	nop
 80037f8:	0800373d 	.word	0x0800373d
 80037fc:	20000378 	.word	0x20000378

08003800 <_fwalk_sglue>:
 8003800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003804:	4607      	mov	r7, r0
 8003806:	4688      	mov	r8, r1
 8003808:	4614      	mov	r4, r2
 800380a:	2600      	movs	r6, #0
 800380c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003810:	f1b9 0901 	subs.w	r9, r9, #1
 8003814:	d505      	bpl.n	8003822 <_fwalk_sglue+0x22>
 8003816:	6824      	ldr	r4, [r4, #0]
 8003818:	2c00      	cmp	r4, #0
 800381a:	d1f7      	bne.n	800380c <_fwalk_sglue+0xc>
 800381c:	4630      	mov	r0, r6
 800381e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003822:	89ab      	ldrh	r3, [r5, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d907      	bls.n	8003838 <_fwalk_sglue+0x38>
 8003828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800382c:	3301      	adds	r3, #1
 800382e:	d003      	beq.n	8003838 <_fwalk_sglue+0x38>
 8003830:	4629      	mov	r1, r5
 8003832:	4638      	mov	r0, r7
 8003834:	47c0      	blx	r8
 8003836:	4306      	orrs	r6, r0
 8003838:	3568      	adds	r5, #104	; 0x68
 800383a:	e7e9      	b.n	8003810 <_fwalk_sglue+0x10>

0800383c <iprintf>:
 800383c:	b40f      	push	{r0, r1, r2, r3}
 800383e:	b507      	push	{r0, r1, r2, lr}
 8003840:	4906      	ldr	r1, [pc, #24]	; (800385c <iprintf+0x20>)
 8003842:	ab04      	add	r3, sp, #16
 8003844:	6808      	ldr	r0, [r1, #0]
 8003846:	f853 2b04 	ldr.w	r2, [r3], #4
 800384a:	6881      	ldr	r1, [r0, #8]
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	f000 f95b 	bl	8003b08 <_vfiprintf_r>
 8003852:	b003      	add	sp, #12
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b004      	add	sp, #16
 800385a:	4770      	bx	lr
 800385c:	20000184 	.word	0x20000184

08003860 <__sread>:
 8003860:	b510      	push	{r4, lr}
 8003862:	460c      	mov	r4, r1
 8003864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003868:	f000 f868 	bl	800393c <_read_r>
 800386c:	2800      	cmp	r0, #0
 800386e:	bfab      	itete	ge
 8003870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003872:	89a3      	ldrhlt	r3, [r4, #12]
 8003874:	181b      	addge	r3, r3, r0
 8003876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800387a:	bfac      	ite	ge
 800387c:	6563      	strge	r3, [r4, #84]	; 0x54
 800387e:	81a3      	strhlt	r3, [r4, #12]
 8003880:	bd10      	pop	{r4, pc}

08003882 <__swrite>:
 8003882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003886:	461f      	mov	r7, r3
 8003888:	898b      	ldrh	r3, [r1, #12]
 800388a:	05db      	lsls	r3, r3, #23
 800388c:	4605      	mov	r5, r0
 800388e:	460c      	mov	r4, r1
 8003890:	4616      	mov	r6, r2
 8003892:	d505      	bpl.n	80038a0 <__swrite+0x1e>
 8003894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003898:	2302      	movs	r3, #2
 800389a:	2200      	movs	r2, #0
 800389c:	f000 f83c 	bl	8003918 <_lseek_r>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	4632      	mov	r2, r6
 80038ae:	463b      	mov	r3, r7
 80038b0:	4628      	mov	r0, r5
 80038b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038b6:	f000 b863 	b.w	8003980 <_write_r>

080038ba <__sseek>:
 80038ba:	b510      	push	{r4, lr}
 80038bc:	460c      	mov	r4, r1
 80038be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c2:	f000 f829 	bl	8003918 <_lseek_r>
 80038c6:	1c43      	adds	r3, r0, #1
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	bf15      	itete	ne
 80038cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80038ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038d6:	81a3      	strheq	r3, [r4, #12]
 80038d8:	bf18      	it	ne
 80038da:	81a3      	strhne	r3, [r4, #12]
 80038dc:	bd10      	pop	{r4, pc}

080038de <__sclose>:
 80038de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e2:	f000 b809 	b.w	80038f8 <_close_r>

080038e6 <memset>:
 80038e6:	4402      	add	r2, r0
 80038e8:	4603      	mov	r3, r0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d100      	bne.n	80038f0 <memset+0xa>
 80038ee:	4770      	bx	lr
 80038f0:	f803 1b01 	strb.w	r1, [r3], #1
 80038f4:	e7f9      	b.n	80038ea <memset+0x4>
	...

080038f8 <_close_r>:
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	4d06      	ldr	r5, [pc, #24]	; (8003914 <_close_r+0x1c>)
 80038fc:	2300      	movs	r3, #0
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	f7fd fd66 	bl	80013d4 <_close>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d102      	bne.n	8003912 <_close_r+0x1a>
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	b103      	cbz	r3, 8003912 <_close_r+0x1a>
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	2000037c 	.word	0x2000037c

08003918 <_lseek_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4d07      	ldr	r5, [pc, #28]	; (8003938 <_lseek_r+0x20>)
 800391c:	4604      	mov	r4, r0
 800391e:	4608      	mov	r0, r1
 8003920:	4611      	mov	r1, r2
 8003922:	2200      	movs	r2, #0
 8003924:	602a      	str	r2, [r5, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	f7fd fd7b 	bl	8001422 <_lseek>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_lseek_r+0x1e>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	b103      	cbz	r3, 8003936 <_lseek_r+0x1e>
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	2000037c 	.word	0x2000037c

0800393c <_read_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4d07      	ldr	r5, [pc, #28]	; (800395c <_read_r+0x20>)
 8003940:	4604      	mov	r4, r0
 8003942:	4608      	mov	r0, r1
 8003944:	4611      	mov	r1, r2
 8003946:	2200      	movs	r2, #0
 8003948:	602a      	str	r2, [r5, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f7fd fcdc 	bl	8001308 <_read>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_read_r+0x1e>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_read_r+0x1e>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	2000037c 	.word	0x2000037c

08003960 <_sbrk_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4d06      	ldr	r5, [pc, #24]	; (800397c <_sbrk_r+0x1c>)
 8003964:	2300      	movs	r3, #0
 8003966:	4604      	mov	r4, r0
 8003968:	4608      	mov	r0, r1
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	f7fd fd06 	bl	800137c <_sbrk>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_sbrk_r+0x1a>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_sbrk_r+0x1a>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	2000037c 	.word	0x2000037c

08003980 <_write_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4d07      	ldr	r5, [pc, #28]	; (80039a0 <_write_r+0x20>)
 8003984:	4604      	mov	r4, r0
 8003986:	4608      	mov	r0, r1
 8003988:	4611      	mov	r1, r2
 800398a:	2200      	movs	r2, #0
 800398c:	602a      	str	r2, [r5, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f7fd fcd7 	bl	8001342 <_write>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d102      	bne.n	800399e <_write_r+0x1e>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	b103      	cbz	r3, 800399e <_write_r+0x1e>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	2000037c 	.word	0x2000037c

080039a4 <__errno>:
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <__errno+0x8>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000184 	.word	0x20000184

080039b0 <__libc_init_array>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	4d0d      	ldr	r5, [pc, #52]	; (80039e8 <__libc_init_array+0x38>)
 80039b4:	4c0d      	ldr	r4, [pc, #52]	; (80039ec <__libc_init_array+0x3c>)
 80039b6:	1b64      	subs	r4, r4, r5
 80039b8:	10a4      	asrs	r4, r4, #2
 80039ba:	2600      	movs	r6, #0
 80039bc:	42a6      	cmp	r6, r4
 80039be:	d109      	bne.n	80039d4 <__libc_init_array+0x24>
 80039c0:	4d0b      	ldr	r5, [pc, #44]	; (80039f0 <__libc_init_array+0x40>)
 80039c2:	4c0c      	ldr	r4, [pc, #48]	; (80039f4 <__libc_init_array+0x44>)
 80039c4:	f000 fd12 	bl	80043ec <_init>
 80039c8:	1b64      	subs	r4, r4, r5
 80039ca:	10a4      	asrs	r4, r4, #2
 80039cc:	2600      	movs	r6, #0
 80039ce:	42a6      	cmp	r6, r4
 80039d0:	d105      	bne.n	80039de <__libc_init_array+0x2e>
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d8:	4798      	blx	r3
 80039da:	3601      	adds	r6, #1
 80039dc:	e7ee      	b.n	80039bc <__libc_init_array+0xc>
 80039de:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e2:	4798      	blx	r3
 80039e4:	3601      	adds	r6, #1
 80039e6:	e7f2      	b.n	80039ce <__libc_init_array+0x1e>
 80039e8:	080044ac 	.word	0x080044ac
 80039ec:	080044ac 	.word	0x080044ac
 80039f0:	080044ac 	.word	0x080044ac
 80039f4:	080044b0 	.word	0x080044b0

080039f8 <__retarget_lock_init_recursive>:
 80039f8:	4770      	bx	lr

080039fa <__retarget_lock_acquire_recursive>:
 80039fa:	4770      	bx	lr

080039fc <__retarget_lock_release_recursive>:
 80039fc:	4770      	bx	lr

080039fe <memcpy>:
 80039fe:	440a      	add	r2, r1
 8003a00:	4291      	cmp	r1, r2
 8003a02:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a06:	d100      	bne.n	8003a0a <memcpy+0xc>
 8003a08:	4770      	bx	lr
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a14:	4291      	cmp	r1, r2
 8003a16:	d1f9      	bne.n	8003a0c <memcpy+0xe>
 8003a18:	bd10      	pop	{r4, pc}
	...

08003a1c <_free_r>:
 8003a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a1e:	2900      	cmp	r1, #0
 8003a20:	d044      	beq.n	8003aac <_free_r+0x90>
 8003a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a26:	9001      	str	r0, [sp, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a2e:	bfb8      	it	lt
 8003a30:	18e4      	addlt	r4, r4, r3
 8003a32:	f7ff fe35 	bl	80036a0 <__malloc_lock>
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <_free_r+0x94>)
 8003a38:	9801      	ldr	r0, [sp, #4]
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	b933      	cbnz	r3, 8003a4c <_free_r+0x30>
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	6014      	str	r4, [r2, #0]
 8003a42:	b003      	add	sp, #12
 8003a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a48:	f7ff be30 	b.w	80036ac <__malloc_unlock>
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	d908      	bls.n	8003a62 <_free_r+0x46>
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	1961      	adds	r1, r4, r5
 8003a54:	428b      	cmp	r3, r1
 8003a56:	bf01      	itttt	eq
 8003a58:	6819      	ldreq	r1, [r3, #0]
 8003a5a:	685b      	ldreq	r3, [r3, #4]
 8003a5c:	1949      	addeq	r1, r1, r5
 8003a5e:	6021      	streq	r1, [r4, #0]
 8003a60:	e7ed      	b.n	8003a3e <_free_r+0x22>
 8003a62:	461a      	mov	r2, r3
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	b10b      	cbz	r3, 8003a6c <_free_r+0x50>
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d9fa      	bls.n	8003a62 <_free_r+0x46>
 8003a6c:	6811      	ldr	r1, [r2, #0]
 8003a6e:	1855      	adds	r5, r2, r1
 8003a70:	42a5      	cmp	r5, r4
 8003a72:	d10b      	bne.n	8003a8c <_free_r+0x70>
 8003a74:	6824      	ldr	r4, [r4, #0]
 8003a76:	4421      	add	r1, r4
 8003a78:	1854      	adds	r4, r2, r1
 8003a7a:	42a3      	cmp	r3, r4
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	d1e0      	bne.n	8003a42 <_free_r+0x26>
 8003a80:	681c      	ldr	r4, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	440c      	add	r4, r1
 8003a88:	6014      	str	r4, [r2, #0]
 8003a8a:	e7da      	b.n	8003a42 <_free_r+0x26>
 8003a8c:	d902      	bls.n	8003a94 <_free_r+0x78>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6003      	str	r3, [r0, #0]
 8003a92:	e7d6      	b.n	8003a42 <_free_r+0x26>
 8003a94:	6825      	ldr	r5, [r4, #0]
 8003a96:	1961      	adds	r1, r4, r5
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	bf04      	itt	eq
 8003a9c:	6819      	ldreq	r1, [r3, #0]
 8003a9e:	685b      	ldreq	r3, [r3, #4]
 8003aa0:	6063      	str	r3, [r4, #4]
 8003aa2:	bf04      	itt	eq
 8003aa4:	1949      	addeq	r1, r1, r5
 8003aa6:	6021      	streq	r1, [r4, #0]
 8003aa8:	6054      	str	r4, [r2, #4]
 8003aaa:	e7ca      	b.n	8003a42 <_free_r+0x26>
 8003aac:	b003      	add	sp, #12
 8003aae:	bd30      	pop	{r4, r5, pc}
 8003ab0:	20000238 	.word	0x20000238

08003ab4 <__sfputc_r>:
 8003ab4:	6893      	ldr	r3, [r2, #8]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	b410      	push	{r4}
 8003abc:	6093      	str	r3, [r2, #8]
 8003abe:	da08      	bge.n	8003ad2 <__sfputc_r+0x1e>
 8003ac0:	6994      	ldr	r4, [r2, #24]
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	db01      	blt.n	8003aca <__sfputc_r+0x16>
 8003ac6:	290a      	cmp	r1, #10
 8003ac8:	d103      	bne.n	8003ad2 <__sfputc_r+0x1e>
 8003aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ace:	f000 bb73 	b.w	80041b8 <__swbuf_r>
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	1c58      	adds	r0, r3, #1
 8003ad6:	6010      	str	r0, [r2, #0]
 8003ad8:	7019      	strb	r1, [r3, #0]
 8003ada:	4608      	mov	r0, r1
 8003adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <__sfputs_r>:
 8003ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	460f      	mov	r7, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	18d5      	adds	r5, r2, r3
 8003aec:	42ac      	cmp	r4, r5
 8003aee:	d101      	bne.n	8003af4 <__sfputs_r+0x12>
 8003af0:	2000      	movs	r0, #0
 8003af2:	e007      	b.n	8003b04 <__sfputs_r+0x22>
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	463a      	mov	r2, r7
 8003afa:	4630      	mov	r0, r6
 8003afc:	f7ff ffda 	bl	8003ab4 <__sfputc_r>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d1f3      	bne.n	8003aec <__sfputs_r+0xa>
 8003b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b08 <_vfiprintf_r>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	460d      	mov	r5, r1
 8003b0e:	b09d      	sub	sp, #116	; 0x74
 8003b10:	4614      	mov	r4, r2
 8003b12:	4698      	mov	r8, r3
 8003b14:	4606      	mov	r6, r0
 8003b16:	b118      	cbz	r0, 8003b20 <_vfiprintf_r+0x18>
 8003b18:	6a03      	ldr	r3, [r0, #32]
 8003b1a:	b90b      	cbnz	r3, 8003b20 <_vfiprintf_r+0x18>
 8003b1c:	f7ff fe58 	bl	80037d0 <__sinit>
 8003b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b22:	07d9      	lsls	r1, r3, #31
 8003b24:	d405      	bmi.n	8003b32 <_vfiprintf_r+0x2a>
 8003b26:	89ab      	ldrh	r3, [r5, #12]
 8003b28:	059a      	lsls	r2, r3, #22
 8003b2a:	d402      	bmi.n	8003b32 <_vfiprintf_r+0x2a>
 8003b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b2e:	f7ff ff64 	bl	80039fa <__retarget_lock_acquire_recursive>
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	d501      	bpl.n	8003b3c <_vfiprintf_r+0x34>
 8003b38:	692b      	ldr	r3, [r5, #16]
 8003b3a:	b99b      	cbnz	r3, 8003b64 <_vfiprintf_r+0x5c>
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f000 fb78 	bl	8004234 <__swsetup_r>
 8003b44:	b170      	cbz	r0, 8003b64 <_vfiprintf_r+0x5c>
 8003b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b48:	07dc      	lsls	r4, r3, #31
 8003b4a:	d504      	bpl.n	8003b56 <_vfiprintf_r+0x4e>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	b01d      	add	sp, #116	; 0x74
 8003b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	0598      	lsls	r0, r3, #22
 8003b5a:	d4f7      	bmi.n	8003b4c <_vfiprintf_r+0x44>
 8003b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b5e:	f7ff ff4d 	bl	80039fc <__retarget_lock_release_recursive>
 8003b62:	e7f3      	b.n	8003b4c <_vfiprintf_r+0x44>
 8003b64:	2300      	movs	r3, #0
 8003b66:	9309      	str	r3, [sp, #36]	; 0x24
 8003b68:	2320      	movs	r3, #32
 8003b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b72:	2330      	movs	r3, #48	; 0x30
 8003b74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003d28 <_vfiprintf_r+0x220>
 8003b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b7c:	f04f 0901 	mov.w	r9, #1
 8003b80:	4623      	mov	r3, r4
 8003b82:	469a      	mov	sl, r3
 8003b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b88:	b10a      	cbz	r2, 8003b8e <_vfiprintf_r+0x86>
 8003b8a:	2a25      	cmp	r2, #37	; 0x25
 8003b8c:	d1f9      	bne.n	8003b82 <_vfiprintf_r+0x7a>
 8003b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003b92:	d00b      	beq.n	8003bac <_vfiprintf_r+0xa4>
 8003b94:	465b      	mov	r3, fp
 8003b96:	4622      	mov	r2, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ffa1 	bl	8003ae2 <__sfputs_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f000 80a9 	beq.w	8003cf8 <_vfiprintf_r+0x1f0>
 8003ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ba8:	445a      	add	r2, fp
 8003baa:	9209      	str	r2, [sp, #36]	; 0x24
 8003bac:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80a1 	beq.w	8003cf8 <_vfiprintf_r+0x1f0>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc0:	f10a 0a01 	add.w	sl, sl, #1
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	9307      	str	r3, [sp, #28]
 8003bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8003bce:	4654      	mov	r4, sl
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd6:	4854      	ldr	r0, [pc, #336]	; (8003d28 <_vfiprintf_r+0x220>)
 8003bd8:	f7fc fafa 	bl	80001d0 <memchr>
 8003bdc:	9a04      	ldr	r2, [sp, #16]
 8003bde:	b9d8      	cbnz	r0, 8003c18 <_vfiprintf_r+0x110>
 8003be0:	06d1      	lsls	r1, r2, #27
 8003be2:	bf44      	itt	mi
 8003be4:	2320      	movmi	r3, #32
 8003be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bea:	0713      	lsls	r3, r2, #28
 8003bec:	bf44      	itt	mi
 8003bee:	232b      	movmi	r3, #43	; 0x2b
 8003bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfa:	d015      	beq.n	8003c28 <_vfiprintf_r+0x120>
 8003bfc:	9a07      	ldr	r2, [sp, #28]
 8003bfe:	4654      	mov	r4, sl
 8003c00:	2000      	movs	r0, #0
 8003c02:	f04f 0c0a 	mov.w	ip, #10
 8003c06:	4621      	mov	r1, r4
 8003c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0c:	3b30      	subs	r3, #48	; 0x30
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d94d      	bls.n	8003cae <_vfiprintf_r+0x1a6>
 8003c12:	b1b0      	cbz	r0, 8003c42 <_vfiprintf_r+0x13a>
 8003c14:	9207      	str	r2, [sp, #28]
 8003c16:	e014      	b.n	8003c42 <_vfiprintf_r+0x13a>
 8003c18:	eba0 0308 	sub.w	r3, r0, r8
 8003c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	46a2      	mov	sl, r4
 8003c26:	e7d2      	b.n	8003bce <_vfiprintf_r+0xc6>
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	1d19      	adds	r1, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	9103      	str	r1, [sp, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bfbb      	ittet	lt
 8003c34:	425b      	neglt	r3, r3
 8003c36:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3a:	9307      	strge	r3, [sp, #28]
 8003c3c:	9307      	strlt	r3, [sp, #28]
 8003c3e:	bfb8      	it	lt
 8003c40:	9204      	strlt	r2, [sp, #16]
 8003c42:	7823      	ldrb	r3, [r4, #0]
 8003c44:	2b2e      	cmp	r3, #46	; 0x2e
 8003c46:	d10c      	bne.n	8003c62 <_vfiprintf_r+0x15a>
 8003c48:	7863      	ldrb	r3, [r4, #1]
 8003c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4c:	d134      	bne.n	8003cb8 <_vfiprintf_r+0x1b0>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	9203      	str	r2, [sp, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfb8      	it	lt
 8003c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c5e:	3402      	adds	r4, #2
 8003c60:	9305      	str	r3, [sp, #20]
 8003c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003d38 <_vfiprintf_r+0x230>
 8003c66:	7821      	ldrb	r1, [r4, #0]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	4650      	mov	r0, sl
 8003c6c:	f7fc fab0 	bl	80001d0 <memchr>
 8003c70:	b138      	cbz	r0, 8003c82 <_vfiprintf_r+0x17a>
 8003c72:	9b04      	ldr	r3, [sp, #16]
 8003c74:	eba0 000a 	sub.w	r0, r0, sl
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	4082      	lsls	r2, r0
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	3401      	adds	r4, #1
 8003c80:	9304      	str	r3, [sp, #16]
 8003c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c86:	4829      	ldr	r0, [pc, #164]	; (8003d2c <_vfiprintf_r+0x224>)
 8003c88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c8c:	2206      	movs	r2, #6
 8003c8e:	f7fc fa9f 	bl	80001d0 <memchr>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d03f      	beq.n	8003d16 <_vfiprintf_r+0x20e>
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <_vfiprintf_r+0x228>)
 8003c98:	bb1b      	cbnz	r3, 8003ce2 <_vfiprintf_r+0x1da>
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	3307      	adds	r3, #7
 8003c9e:	f023 0307 	bic.w	r3, r3, #7
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	9303      	str	r3, [sp, #12]
 8003ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca8:	443b      	add	r3, r7
 8003caa:	9309      	str	r3, [sp, #36]	; 0x24
 8003cac:	e768      	b.n	8003b80 <_vfiprintf_r+0x78>
 8003cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e7a6      	b.n	8003c06 <_vfiprintf_r+0xfe>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	3401      	adds	r4, #1
 8003cbc:	9305      	str	r3, [sp, #20]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f04f 0c0a 	mov.w	ip, #10
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cca:	3a30      	subs	r2, #48	; 0x30
 8003ccc:	2a09      	cmp	r2, #9
 8003cce:	d903      	bls.n	8003cd8 <_vfiprintf_r+0x1d0>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0c6      	beq.n	8003c62 <_vfiprintf_r+0x15a>
 8003cd4:	9105      	str	r1, [sp, #20]
 8003cd6:	e7c4      	b.n	8003c62 <_vfiprintf_r+0x15a>
 8003cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cdc:	4604      	mov	r4, r0
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e7f0      	b.n	8003cc4 <_vfiprintf_r+0x1bc>
 8003ce2:	ab03      	add	r3, sp, #12
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	462a      	mov	r2, r5
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <_vfiprintf_r+0x22c>)
 8003cea:	a904      	add	r1, sp, #16
 8003cec:	4630      	mov	r0, r6
 8003cee:	f3af 8000 	nop.w
 8003cf2:	4607      	mov	r7, r0
 8003cf4:	1c78      	adds	r0, r7, #1
 8003cf6:	d1d6      	bne.n	8003ca6 <_vfiprintf_r+0x19e>
 8003cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cfa:	07d9      	lsls	r1, r3, #31
 8003cfc:	d405      	bmi.n	8003d0a <_vfiprintf_r+0x202>
 8003cfe:	89ab      	ldrh	r3, [r5, #12]
 8003d00:	059a      	lsls	r2, r3, #22
 8003d02:	d402      	bmi.n	8003d0a <_vfiprintf_r+0x202>
 8003d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d06:	f7ff fe79 	bl	80039fc <__retarget_lock_release_recursive>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	065b      	lsls	r3, r3, #25
 8003d0e:	f53f af1d 	bmi.w	8003b4c <_vfiprintf_r+0x44>
 8003d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d14:	e71c      	b.n	8003b50 <_vfiprintf_r+0x48>
 8003d16:	ab03      	add	r3, sp, #12
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <_vfiprintf_r+0x22c>)
 8003d1e:	a904      	add	r1, sp, #16
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 f879 	bl	8003e18 <_printf_i>
 8003d26:	e7e4      	b.n	8003cf2 <_vfiprintf_r+0x1ea>
 8003d28:	08004478 	.word	0x08004478
 8003d2c:	08004482 	.word	0x08004482
 8003d30:	00000000 	.word	0x00000000
 8003d34:	08003ae3 	.word	0x08003ae3
 8003d38:	0800447e 	.word	0x0800447e

08003d3c <_printf_common>:
 8003d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	4616      	mov	r6, r2
 8003d42:	4699      	mov	r9, r3
 8003d44:	688a      	ldr	r2, [r1, #8]
 8003d46:	690b      	ldr	r3, [r1, #16]
 8003d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bfb8      	it	lt
 8003d50:	4613      	movlt	r3, r2
 8003d52:	6033      	str	r3, [r6, #0]
 8003d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d58:	4607      	mov	r7, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	b10a      	cbz	r2, 8003d62 <_printf_common+0x26>
 8003d5e:	3301      	adds	r3, #1
 8003d60:	6033      	str	r3, [r6, #0]
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	0699      	lsls	r1, r3, #26
 8003d66:	bf42      	ittt	mi
 8003d68:	6833      	ldrmi	r3, [r6, #0]
 8003d6a:	3302      	addmi	r3, #2
 8003d6c:	6033      	strmi	r3, [r6, #0]
 8003d6e:	6825      	ldr	r5, [r4, #0]
 8003d70:	f015 0506 	ands.w	r5, r5, #6
 8003d74:	d106      	bne.n	8003d84 <_printf_common+0x48>
 8003d76:	f104 0a19 	add.w	sl, r4, #25
 8003d7a:	68e3      	ldr	r3, [r4, #12]
 8003d7c:	6832      	ldr	r2, [r6, #0]
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	42ab      	cmp	r3, r5
 8003d82:	dc26      	bgt.n	8003dd2 <_printf_common+0x96>
 8003d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d88:	1e13      	subs	r3, r2, #0
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	bf18      	it	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	0692      	lsls	r2, r2, #26
 8003d92:	d42b      	bmi.n	8003dec <_printf_common+0xb0>
 8003d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d98:	4649      	mov	r1, r9
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	47c0      	blx	r8
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d01e      	beq.n	8003de0 <_printf_common+0xa4>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	6922      	ldr	r2, [r4, #16]
 8003da6:	f003 0306 	and.w	r3, r3, #6
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	bf02      	ittt	eq
 8003dae:	68e5      	ldreq	r5, [r4, #12]
 8003db0:	6833      	ldreq	r3, [r6, #0]
 8003db2:	1aed      	subeq	r5, r5, r3
 8003db4:	68a3      	ldr	r3, [r4, #8]
 8003db6:	bf0c      	ite	eq
 8003db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dbc:	2500      	movne	r5, #0
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	bfc4      	itt	gt
 8003dc2:	1a9b      	subgt	r3, r3, r2
 8003dc4:	18ed      	addgt	r5, r5, r3
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	341a      	adds	r4, #26
 8003dca:	42b5      	cmp	r5, r6
 8003dcc:	d11a      	bne.n	8003e04 <_printf_common+0xc8>
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e008      	b.n	8003de4 <_printf_common+0xa8>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4652      	mov	r2, sl
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4638      	mov	r0, r7
 8003dda:	47c0      	blx	r8
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d103      	bne.n	8003de8 <_printf_common+0xac>
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de8:	3501      	adds	r5, #1
 8003dea:	e7c6      	b.n	8003d7a <_printf_common+0x3e>
 8003dec:	18e1      	adds	r1, r4, r3
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	2030      	movs	r0, #48	; 0x30
 8003df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003df6:	4422      	add	r2, r4
 8003df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e00:	3302      	adds	r3, #2
 8003e02:	e7c7      	b.n	8003d94 <_printf_common+0x58>
 8003e04:	2301      	movs	r3, #1
 8003e06:	4622      	mov	r2, r4
 8003e08:	4649      	mov	r1, r9
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d0e6      	beq.n	8003de0 <_printf_common+0xa4>
 8003e12:	3601      	adds	r6, #1
 8003e14:	e7d9      	b.n	8003dca <_printf_common+0x8e>
	...

08003e18 <_printf_i>:
 8003e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	7e0f      	ldrb	r7, [r1, #24]
 8003e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e20:	2f78      	cmp	r7, #120	; 0x78
 8003e22:	4691      	mov	r9, r2
 8003e24:	4680      	mov	r8, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	469a      	mov	sl, r3
 8003e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e2e:	d807      	bhi.n	8003e40 <_printf_i+0x28>
 8003e30:	2f62      	cmp	r7, #98	; 0x62
 8003e32:	d80a      	bhi.n	8003e4a <_printf_i+0x32>
 8003e34:	2f00      	cmp	r7, #0
 8003e36:	f000 80d4 	beq.w	8003fe2 <_printf_i+0x1ca>
 8003e3a:	2f58      	cmp	r7, #88	; 0x58
 8003e3c:	f000 80c0 	beq.w	8003fc0 <_printf_i+0x1a8>
 8003e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e48:	e03a      	b.n	8003ec0 <_printf_i+0xa8>
 8003e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e4e:	2b15      	cmp	r3, #21
 8003e50:	d8f6      	bhi.n	8003e40 <_printf_i+0x28>
 8003e52:	a101      	add	r1, pc, #4	; (adr r1, 8003e58 <_printf_i+0x40>)
 8003e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003ec5 	.word	0x08003ec5
 8003e60:	08003e41 	.word	0x08003e41
 8003e64:	08003e41 	.word	0x08003e41
 8003e68:	08003e41 	.word	0x08003e41
 8003e6c:	08003e41 	.word	0x08003e41
 8003e70:	08003ec5 	.word	0x08003ec5
 8003e74:	08003e41 	.word	0x08003e41
 8003e78:	08003e41 	.word	0x08003e41
 8003e7c:	08003e41 	.word	0x08003e41
 8003e80:	08003e41 	.word	0x08003e41
 8003e84:	08003fc9 	.word	0x08003fc9
 8003e88:	08003ef1 	.word	0x08003ef1
 8003e8c:	08003f83 	.word	0x08003f83
 8003e90:	08003e41 	.word	0x08003e41
 8003e94:	08003e41 	.word	0x08003e41
 8003e98:	08003feb 	.word	0x08003feb
 8003e9c:	08003e41 	.word	0x08003e41
 8003ea0:	08003ef1 	.word	0x08003ef1
 8003ea4:	08003e41 	.word	0x08003e41
 8003ea8:	08003e41 	.word	0x08003e41
 8003eac:	08003f8b 	.word	0x08003f8b
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	1d1a      	adds	r2, r3, #4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	602a      	str	r2, [r5, #0]
 8003eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e09f      	b.n	8004004 <_printf_i+0x1ec>
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	0607      	lsls	r7, r0, #24
 8003eca:	f103 0104 	add.w	r1, r3, #4
 8003ece:	6029      	str	r1, [r5, #0]
 8003ed0:	d501      	bpl.n	8003ed6 <_printf_i+0xbe>
 8003ed2:	681e      	ldr	r6, [r3, #0]
 8003ed4:	e003      	b.n	8003ede <_printf_i+0xc6>
 8003ed6:	0646      	lsls	r6, r0, #25
 8003ed8:	d5fb      	bpl.n	8003ed2 <_printf_i+0xba>
 8003eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ede:	2e00      	cmp	r6, #0
 8003ee0:	da03      	bge.n	8003eea <_printf_i+0xd2>
 8003ee2:	232d      	movs	r3, #45	; 0x2d
 8003ee4:	4276      	negs	r6, r6
 8003ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eea:	485a      	ldr	r0, [pc, #360]	; (8004054 <_printf_i+0x23c>)
 8003eec:	230a      	movs	r3, #10
 8003eee:	e012      	b.n	8003f16 <_printf_i+0xfe>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	6820      	ldr	r0, [r4, #0]
 8003ef4:	1d19      	adds	r1, r3, #4
 8003ef6:	6029      	str	r1, [r5, #0]
 8003ef8:	0605      	lsls	r5, r0, #24
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0xe8>
 8003efc:	681e      	ldr	r6, [r3, #0]
 8003efe:	e002      	b.n	8003f06 <_printf_i+0xee>
 8003f00:	0641      	lsls	r1, r0, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0xe4>
 8003f04:	881e      	ldrh	r6, [r3, #0]
 8003f06:	4853      	ldr	r0, [pc, #332]	; (8004054 <_printf_i+0x23c>)
 8003f08:	2f6f      	cmp	r7, #111	; 0x6f
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2308      	moveq	r3, #8
 8003f0e:	230a      	movne	r3, #10
 8003f10:	2100      	movs	r1, #0
 8003f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f16:	6865      	ldr	r5, [r4, #4]
 8003f18:	60a5      	str	r5, [r4, #8]
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	bfa2      	ittt	ge
 8003f1e:	6821      	ldrge	r1, [r4, #0]
 8003f20:	f021 0104 	bicge.w	r1, r1, #4
 8003f24:	6021      	strge	r1, [r4, #0]
 8003f26:	b90e      	cbnz	r6, 8003f2c <_printf_i+0x114>
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	d04b      	beq.n	8003fc4 <_printf_i+0x1ac>
 8003f2c:	4615      	mov	r5, r2
 8003f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f32:	fb03 6711 	mls	r7, r3, r1, r6
 8003f36:	5dc7      	ldrb	r7, [r0, r7]
 8003f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f3c:	4637      	mov	r7, r6
 8003f3e:	42bb      	cmp	r3, r7
 8003f40:	460e      	mov	r6, r1
 8003f42:	d9f4      	bls.n	8003f2e <_printf_i+0x116>
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d10b      	bne.n	8003f60 <_printf_i+0x148>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07de      	lsls	r6, r3, #31
 8003f4c:	d508      	bpl.n	8003f60 <_printf_i+0x148>
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	6861      	ldr	r1, [r4, #4]
 8003f52:	4299      	cmp	r1, r3
 8003f54:	bfde      	ittt	le
 8003f56:	2330      	movle	r3, #48	; 0x30
 8003f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f60:	1b52      	subs	r2, r2, r5
 8003f62:	6122      	str	r2, [r4, #16]
 8003f64:	f8cd a000 	str.w	sl, [sp]
 8003f68:	464b      	mov	r3, r9
 8003f6a:	aa03      	add	r2, sp, #12
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f7ff fee4 	bl	8003d3c <_printf_common>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d14a      	bne.n	800400e <_printf_i+0x1f6>
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	b004      	add	sp, #16
 8003f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f043 0320 	orr.w	r3, r3, #32
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	4833      	ldr	r0, [pc, #204]	; (8004058 <_printf_i+0x240>)
 8003f8c:	2778      	movs	r7, #120	; 0x78
 8003f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	6829      	ldr	r1, [r5, #0]
 8003f96:	061f      	lsls	r7, r3, #24
 8003f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f9c:	d402      	bmi.n	8003fa4 <_printf_i+0x18c>
 8003f9e:	065f      	lsls	r7, r3, #25
 8003fa0:	bf48      	it	mi
 8003fa2:	b2b6      	uxthmi	r6, r6
 8003fa4:	07df      	lsls	r7, r3, #31
 8003fa6:	bf48      	it	mi
 8003fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8003fac:	6029      	str	r1, [r5, #0]
 8003fae:	bf48      	it	mi
 8003fb0:	6023      	strmi	r3, [r4, #0]
 8003fb2:	b91e      	cbnz	r6, 8003fbc <_printf_i+0x1a4>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	f023 0320 	bic.w	r3, r3, #32
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	e7a7      	b.n	8003f10 <_printf_i+0xf8>
 8003fc0:	4824      	ldr	r0, [pc, #144]	; (8004054 <_printf_i+0x23c>)
 8003fc2:	e7e4      	b.n	8003f8e <_printf_i+0x176>
 8003fc4:	4615      	mov	r5, r2
 8003fc6:	e7bd      	b.n	8003f44 <_printf_i+0x12c>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	6826      	ldr	r6, [r4, #0]
 8003fcc:	6961      	ldr	r1, [r4, #20]
 8003fce:	1d18      	adds	r0, r3, #4
 8003fd0:	6028      	str	r0, [r5, #0]
 8003fd2:	0635      	lsls	r5, r6, #24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	d501      	bpl.n	8003fdc <_printf_i+0x1c4>
 8003fd8:	6019      	str	r1, [r3, #0]
 8003fda:	e002      	b.n	8003fe2 <_printf_i+0x1ca>
 8003fdc:	0670      	lsls	r0, r6, #25
 8003fde:	d5fb      	bpl.n	8003fd8 <_printf_i+0x1c0>
 8003fe0:	8019      	strh	r1, [r3, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	4615      	mov	r5, r2
 8003fe8:	e7bc      	b.n	8003f64 <_printf_i+0x14c>
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	681d      	ldr	r5, [r3, #0]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f7fc f8ea 	bl	80001d0 <memchr>
 8003ffc:	b108      	cbz	r0, 8004002 <_printf_i+0x1ea>
 8003ffe:	1b40      	subs	r0, r0, r5
 8004000:	6060      	str	r0, [r4, #4]
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	2300      	movs	r3, #0
 8004008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400c:	e7aa      	b.n	8003f64 <_printf_i+0x14c>
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	462a      	mov	r2, r5
 8004012:	4649      	mov	r1, r9
 8004014:	4640      	mov	r0, r8
 8004016:	47d0      	blx	sl
 8004018:	3001      	adds	r0, #1
 800401a:	d0ad      	beq.n	8003f78 <_printf_i+0x160>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	079b      	lsls	r3, r3, #30
 8004020:	d413      	bmi.n	800404a <_printf_i+0x232>
 8004022:	68e0      	ldr	r0, [r4, #12]
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	4298      	cmp	r0, r3
 8004028:	bfb8      	it	lt
 800402a:	4618      	movlt	r0, r3
 800402c:	e7a6      	b.n	8003f7c <_printf_i+0x164>
 800402e:	2301      	movs	r3, #1
 8004030:	4632      	mov	r2, r6
 8004032:	4649      	mov	r1, r9
 8004034:	4640      	mov	r0, r8
 8004036:	47d0      	blx	sl
 8004038:	3001      	adds	r0, #1
 800403a:	d09d      	beq.n	8003f78 <_printf_i+0x160>
 800403c:	3501      	adds	r5, #1
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	9903      	ldr	r1, [sp, #12]
 8004042:	1a5b      	subs	r3, r3, r1
 8004044:	42ab      	cmp	r3, r5
 8004046:	dcf2      	bgt.n	800402e <_printf_i+0x216>
 8004048:	e7eb      	b.n	8004022 <_printf_i+0x20a>
 800404a:	2500      	movs	r5, #0
 800404c:	f104 0619 	add.w	r6, r4, #25
 8004050:	e7f5      	b.n	800403e <_printf_i+0x226>
 8004052:	bf00      	nop
 8004054:	08004489 	.word	0x08004489
 8004058:	0800449a 	.word	0x0800449a

0800405c <__sflush_r>:
 800405c:	898a      	ldrh	r2, [r1, #12]
 800405e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004062:	4605      	mov	r5, r0
 8004064:	0710      	lsls	r0, r2, #28
 8004066:	460c      	mov	r4, r1
 8004068:	d458      	bmi.n	800411c <__sflush_r+0xc0>
 800406a:	684b      	ldr	r3, [r1, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dc05      	bgt.n	800407c <__sflush_r+0x20>
 8004070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	dc02      	bgt.n	800407c <__sflush_r+0x20>
 8004076:	2000      	movs	r0, #0
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800407e:	2e00      	cmp	r6, #0
 8004080:	d0f9      	beq.n	8004076 <__sflush_r+0x1a>
 8004082:	2300      	movs	r3, #0
 8004084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004088:	682f      	ldr	r7, [r5, #0]
 800408a:	6a21      	ldr	r1, [r4, #32]
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	d032      	beq.n	80040f6 <__sflush_r+0x9a>
 8004090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	075a      	lsls	r2, r3, #29
 8004096:	d505      	bpl.n	80040a4 <__sflush_r+0x48>
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	1ac0      	subs	r0, r0, r3
 800409c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800409e:	b10b      	cbz	r3, 80040a4 <__sflush_r+0x48>
 80040a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a2:	1ac0      	subs	r0, r0, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	4602      	mov	r2, r0
 80040a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040aa:	6a21      	ldr	r1, [r4, #32]
 80040ac:	4628      	mov	r0, r5
 80040ae:	47b0      	blx	r6
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	d106      	bne.n	80040c4 <__sflush_r+0x68>
 80040b6:	6829      	ldr	r1, [r5, #0]
 80040b8:	291d      	cmp	r1, #29
 80040ba:	d82b      	bhi.n	8004114 <__sflush_r+0xb8>
 80040bc:	4a29      	ldr	r2, [pc, #164]	; (8004164 <__sflush_r+0x108>)
 80040be:	410a      	asrs	r2, r1
 80040c0:	07d6      	lsls	r6, r2, #31
 80040c2:	d427      	bmi.n	8004114 <__sflush_r+0xb8>
 80040c4:	2200      	movs	r2, #0
 80040c6:	6062      	str	r2, [r4, #4]
 80040c8:	04d9      	lsls	r1, r3, #19
 80040ca:	6922      	ldr	r2, [r4, #16]
 80040cc:	6022      	str	r2, [r4, #0]
 80040ce:	d504      	bpl.n	80040da <__sflush_r+0x7e>
 80040d0:	1c42      	adds	r2, r0, #1
 80040d2:	d101      	bne.n	80040d8 <__sflush_r+0x7c>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b903      	cbnz	r3, 80040da <__sflush_r+0x7e>
 80040d8:	6560      	str	r0, [r4, #84]	; 0x54
 80040da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040dc:	602f      	str	r7, [r5, #0]
 80040de:	2900      	cmp	r1, #0
 80040e0:	d0c9      	beq.n	8004076 <__sflush_r+0x1a>
 80040e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040e6:	4299      	cmp	r1, r3
 80040e8:	d002      	beq.n	80040f0 <__sflush_r+0x94>
 80040ea:	4628      	mov	r0, r5
 80040ec:	f7ff fc96 	bl	8003a1c <_free_r>
 80040f0:	2000      	movs	r0, #0
 80040f2:	6360      	str	r0, [r4, #52]	; 0x34
 80040f4:	e7c0      	b.n	8004078 <__sflush_r+0x1c>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b0      	blx	r6
 80040fc:	1c41      	adds	r1, r0, #1
 80040fe:	d1c8      	bne.n	8004092 <__sflush_r+0x36>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0c5      	beq.n	8004092 <__sflush_r+0x36>
 8004106:	2b1d      	cmp	r3, #29
 8004108:	d001      	beq.n	800410e <__sflush_r+0xb2>
 800410a:	2b16      	cmp	r3, #22
 800410c:	d101      	bne.n	8004112 <__sflush_r+0xb6>
 800410e:	602f      	str	r7, [r5, #0]
 8004110:	e7b1      	b.n	8004076 <__sflush_r+0x1a>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	e7ad      	b.n	8004078 <__sflush_r+0x1c>
 800411c:	690f      	ldr	r7, [r1, #16]
 800411e:	2f00      	cmp	r7, #0
 8004120:	d0a9      	beq.n	8004076 <__sflush_r+0x1a>
 8004122:	0793      	lsls	r3, r2, #30
 8004124:	680e      	ldr	r6, [r1, #0]
 8004126:	bf08      	it	eq
 8004128:	694b      	ldreq	r3, [r1, #20]
 800412a:	600f      	str	r7, [r1, #0]
 800412c:	bf18      	it	ne
 800412e:	2300      	movne	r3, #0
 8004130:	eba6 0807 	sub.w	r8, r6, r7
 8004134:	608b      	str	r3, [r1, #8]
 8004136:	f1b8 0f00 	cmp.w	r8, #0
 800413a:	dd9c      	ble.n	8004076 <__sflush_r+0x1a>
 800413c:	6a21      	ldr	r1, [r4, #32]
 800413e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004140:	4643      	mov	r3, r8
 8004142:	463a      	mov	r2, r7
 8004144:	4628      	mov	r0, r5
 8004146:	47b0      	blx	r6
 8004148:	2800      	cmp	r0, #0
 800414a:	dc06      	bgt.n	800415a <__sflush_r+0xfe>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	e78e      	b.n	8004078 <__sflush_r+0x1c>
 800415a:	4407      	add	r7, r0
 800415c:	eba8 0800 	sub.w	r8, r8, r0
 8004160:	e7e9      	b.n	8004136 <__sflush_r+0xda>
 8004162:	bf00      	nop
 8004164:	dfbffffe 	.word	0xdfbffffe

08004168 <_fflush_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	690b      	ldr	r3, [r1, #16]
 800416c:	4605      	mov	r5, r0
 800416e:	460c      	mov	r4, r1
 8004170:	b913      	cbnz	r3, 8004178 <_fflush_r+0x10>
 8004172:	2500      	movs	r5, #0
 8004174:	4628      	mov	r0, r5
 8004176:	bd38      	pop	{r3, r4, r5, pc}
 8004178:	b118      	cbz	r0, 8004182 <_fflush_r+0x1a>
 800417a:	6a03      	ldr	r3, [r0, #32]
 800417c:	b90b      	cbnz	r3, 8004182 <_fflush_r+0x1a>
 800417e:	f7ff fb27 	bl	80037d0 <__sinit>
 8004182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f3      	beq.n	8004172 <_fflush_r+0xa>
 800418a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800418c:	07d0      	lsls	r0, r2, #31
 800418e:	d404      	bmi.n	800419a <_fflush_r+0x32>
 8004190:	0599      	lsls	r1, r3, #22
 8004192:	d402      	bmi.n	800419a <_fflush_r+0x32>
 8004194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004196:	f7ff fc30 	bl	80039fa <__retarget_lock_acquire_recursive>
 800419a:	4628      	mov	r0, r5
 800419c:	4621      	mov	r1, r4
 800419e:	f7ff ff5d 	bl	800405c <__sflush_r>
 80041a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a4:	07da      	lsls	r2, r3, #31
 80041a6:	4605      	mov	r5, r0
 80041a8:	d4e4      	bmi.n	8004174 <_fflush_r+0xc>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	059b      	lsls	r3, r3, #22
 80041ae:	d4e1      	bmi.n	8004174 <_fflush_r+0xc>
 80041b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b2:	f7ff fc23 	bl	80039fc <__retarget_lock_release_recursive>
 80041b6:	e7dd      	b.n	8004174 <_fflush_r+0xc>

080041b8 <__swbuf_r>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	460e      	mov	r6, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	4605      	mov	r5, r0
 80041c0:	b118      	cbz	r0, 80041ca <__swbuf_r+0x12>
 80041c2:	6a03      	ldr	r3, [r0, #32]
 80041c4:	b90b      	cbnz	r3, 80041ca <__swbuf_r+0x12>
 80041c6:	f7ff fb03 	bl	80037d0 <__sinit>
 80041ca:	69a3      	ldr	r3, [r4, #24]
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	071a      	lsls	r2, r3, #28
 80041d2:	d525      	bpl.n	8004220 <__swbuf_r+0x68>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	b31b      	cbz	r3, 8004220 <__swbuf_r+0x68>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	6922      	ldr	r2, [r4, #16]
 80041dc:	1a98      	subs	r0, r3, r2
 80041de:	6963      	ldr	r3, [r4, #20]
 80041e0:	b2f6      	uxtb	r6, r6
 80041e2:	4283      	cmp	r3, r0
 80041e4:	4637      	mov	r7, r6
 80041e6:	dc04      	bgt.n	80041f2 <__swbuf_r+0x3a>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7ff ffbc 	bl	8004168 <_fflush_r>
 80041f0:	b9e0      	cbnz	r0, 800422c <__swbuf_r+0x74>
 80041f2:	68a3      	ldr	r3, [r4, #8]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	60a3      	str	r3, [r4, #8]
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	6022      	str	r2, [r4, #0]
 80041fe:	701e      	strb	r6, [r3, #0]
 8004200:	6962      	ldr	r2, [r4, #20]
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	429a      	cmp	r2, r3
 8004206:	d004      	beq.n	8004212 <__swbuf_r+0x5a>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	07db      	lsls	r3, r3, #31
 800420c:	d506      	bpl.n	800421c <__swbuf_r+0x64>
 800420e:	2e0a      	cmp	r6, #10
 8004210:	d104      	bne.n	800421c <__swbuf_r+0x64>
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	f7ff ffa7 	bl	8004168 <_fflush_r>
 800421a:	b938      	cbnz	r0, 800422c <__swbuf_r+0x74>
 800421c:	4638      	mov	r0, r7
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004220:	4621      	mov	r1, r4
 8004222:	4628      	mov	r0, r5
 8004224:	f000 f806 	bl	8004234 <__swsetup_r>
 8004228:	2800      	cmp	r0, #0
 800422a:	d0d5      	beq.n	80041d8 <__swbuf_r+0x20>
 800422c:	f04f 37ff 	mov.w	r7, #4294967295
 8004230:	e7f4      	b.n	800421c <__swbuf_r+0x64>
	...

08004234 <__swsetup_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <__swsetup_r+0xac>)
 8004238:	4605      	mov	r5, r0
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	460c      	mov	r4, r1
 800423e:	b118      	cbz	r0, 8004248 <__swsetup_r+0x14>
 8004240:	6a03      	ldr	r3, [r0, #32]
 8004242:	b90b      	cbnz	r3, 8004248 <__swsetup_r+0x14>
 8004244:	f7ff fac4 	bl	80037d0 <__sinit>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800424e:	0718      	lsls	r0, r3, #28
 8004250:	d422      	bmi.n	8004298 <__swsetup_r+0x64>
 8004252:	06d9      	lsls	r1, r3, #27
 8004254:	d407      	bmi.n	8004266 <__swsetup_r+0x32>
 8004256:	2309      	movs	r3, #9
 8004258:	602b      	str	r3, [r5, #0]
 800425a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	e034      	b.n	80042d0 <__swsetup_r+0x9c>
 8004266:	0758      	lsls	r0, r3, #29
 8004268:	d512      	bpl.n	8004290 <__swsetup_r+0x5c>
 800426a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800426c:	b141      	cbz	r1, 8004280 <__swsetup_r+0x4c>
 800426e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004272:	4299      	cmp	r1, r3
 8004274:	d002      	beq.n	800427c <__swsetup_r+0x48>
 8004276:	4628      	mov	r0, r5
 8004278:	f7ff fbd0 	bl	8003a1c <_free_r>
 800427c:	2300      	movs	r3, #0
 800427e:	6363      	str	r3, [r4, #52]	; 0x34
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	2300      	movs	r3, #0
 800428a:	6063      	str	r3, [r4, #4]
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0308 	orr.w	r3, r3, #8
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	b94b      	cbnz	r3, 80042b0 <__swsetup_r+0x7c>
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a6:	d003      	beq.n	80042b0 <__swsetup_r+0x7c>
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f840 	bl	8004330 <__smakebuf_r>
 80042b0:	89a0      	ldrh	r0, [r4, #12]
 80042b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042b6:	f010 0301 	ands.w	r3, r0, #1
 80042ba:	d00a      	beq.n	80042d2 <__swsetup_r+0x9e>
 80042bc:	2300      	movs	r3, #0
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	6963      	ldr	r3, [r4, #20]
 80042c2:	425b      	negs	r3, r3
 80042c4:	61a3      	str	r3, [r4, #24]
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	b943      	cbnz	r3, 80042dc <__swsetup_r+0xa8>
 80042ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ce:	d1c4      	bne.n	800425a <__swsetup_r+0x26>
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
 80042d2:	0781      	lsls	r1, r0, #30
 80042d4:	bf58      	it	pl
 80042d6:	6963      	ldrpl	r3, [r4, #20]
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	e7f4      	b.n	80042c6 <__swsetup_r+0x92>
 80042dc:	2000      	movs	r0, #0
 80042de:	e7f7      	b.n	80042d0 <__swsetup_r+0x9c>
 80042e0:	20000184 	.word	0x20000184

080042e4 <__swhatbuf_r>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	460c      	mov	r4, r1
 80042e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ec:	2900      	cmp	r1, #0
 80042ee:	b096      	sub	sp, #88	; 0x58
 80042f0:	4615      	mov	r5, r2
 80042f2:	461e      	mov	r6, r3
 80042f4:	da0d      	bge.n	8004312 <__swhatbuf_r+0x2e>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	bf0c      	ite	eq
 8004302:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004306:	2340      	movne	r3, #64	; 0x40
 8004308:	2000      	movs	r0, #0
 800430a:	6031      	str	r1, [r6, #0]
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	b016      	add	sp, #88	; 0x58
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	466a      	mov	r2, sp
 8004314:	f000 f848 	bl	80043a8 <_fstat_r>
 8004318:	2800      	cmp	r0, #0
 800431a:	dbec      	blt.n	80042f6 <__swhatbuf_r+0x12>
 800431c:	9901      	ldr	r1, [sp, #4]
 800431e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004322:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004326:	4259      	negs	r1, r3
 8004328:	4159      	adcs	r1, r3
 800432a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432e:	e7eb      	b.n	8004308 <__swhatbuf_r+0x24>

08004330 <__smakebuf_r>:
 8004330:	898b      	ldrh	r3, [r1, #12]
 8004332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004334:	079d      	lsls	r5, r3, #30
 8004336:	4606      	mov	r6, r0
 8004338:	460c      	mov	r4, r1
 800433a:	d507      	bpl.n	800434c <__smakebuf_r+0x1c>
 800433c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	6123      	str	r3, [r4, #16]
 8004344:	2301      	movs	r3, #1
 8004346:	6163      	str	r3, [r4, #20]
 8004348:	b002      	add	sp, #8
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	ab01      	add	r3, sp, #4
 800434e:	466a      	mov	r2, sp
 8004350:	f7ff ffc8 	bl	80042e4 <__swhatbuf_r>
 8004354:	9900      	ldr	r1, [sp, #0]
 8004356:	4605      	mov	r5, r0
 8004358:	4630      	mov	r0, r6
 800435a:	f7ff f921 	bl	80035a0 <_malloc_r>
 800435e:	b948      	cbnz	r0, 8004374 <__smakebuf_r+0x44>
 8004360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004364:	059a      	lsls	r2, r3, #22
 8004366:	d4ef      	bmi.n	8004348 <__smakebuf_r+0x18>
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	f043 0302 	orr.w	r3, r3, #2
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	e7e3      	b.n	800433c <__smakebuf_r+0xc>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	6020      	str	r0, [r4, #0]
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	81a3      	strh	r3, [r4, #12]
 800437e:	9b00      	ldr	r3, [sp, #0]
 8004380:	6163      	str	r3, [r4, #20]
 8004382:	9b01      	ldr	r3, [sp, #4]
 8004384:	6120      	str	r0, [r4, #16]
 8004386:	b15b      	cbz	r3, 80043a0 <__smakebuf_r+0x70>
 8004388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800438c:	4630      	mov	r0, r6
 800438e:	f000 f81d 	bl	80043cc <_isatty_r>
 8004392:	b128      	cbz	r0, 80043a0 <__smakebuf_r+0x70>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	431d      	orrs	r5, r3
 80043a4:	81a5      	strh	r5, [r4, #12]
 80043a6:	e7cf      	b.n	8004348 <__smakebuf_r+0x18>

080043a8 <_fstat_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4d07      	ldr	r5, [pc, #28]	; (80043c8 <_fstat_r+0x20>)
 80043ac:	2300      	movs	r3, #0
 80043ae:	4604      	mov	r4, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	602b      	str	r3, [r5, #0]
 80043b6:	f7fd f819 	bl	80013ec <_fstat>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d102      	bne.n	80043c4 <_fstat_r+0x1c>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	b103      	cbz	r3, 80043c4 <_fstat_r+0x1c>
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
 80043c6:	bf00      	nop
 80043c8:	2000037c 	.word	0x2000037c

080043cc <_isatty_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4d06      	ldr	r5, [pc, #24]	; (80043e8 <_isatty_r+0x1c>)
 80043d0:	2300      	movs	r3, #0
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fd f818 	bl	800140c <_isatty>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_isatty_r+0x1a>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_isatty_r+0x1a>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	2000037c 	.word	0x2000037c

080043ec <_init>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr

080043f8 <_fini>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	bf00      	nop
 80043fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fe:	bc08      	pop	{r3}
 8004400:	469e      	mov	lr, r3
 8004402:	4770      	bx	lr
